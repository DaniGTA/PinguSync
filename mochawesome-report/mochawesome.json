{
  "stats": {
    "suites": 18,
    "tests": 98,
    "passes": 92,
    "pending": 0,
    "failures": 6,
    "start": "2019-08-17T18:55:03.219Z",
    "end": "2019-08-17T18:55:47.574Z",
    "duration": 44355,
    "testsRegistered": 98,
    "passPercent": 93.87755102040816,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "bf929c7a-b51e-4024-b140-0ef38a432b4e",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e18939f4-f344-48e5-a336-1277452a493c",
          "title": "AniDB Tests | convert",
          "fullFile": "D:\\Desktop\\VueElectron\\list-manager\\test\\api\\anidb\\anidbConvertXMLToJSONTest.ts",
          "file": "\\test\\api\\anidb\\anidbConvertXMLToJSONTest.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "xml to json",
              "fullTitle": "AniDB Tests | convert xml to json",
              "timedOut": false,
              "duration": 843,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await new anidb_provider_1.default(false)['getAniDBNameListXML']();\nassert_1.deepEqual(result.animetitles.anime[0].title[0]._text, \"CotS\");",
              "err": {},
              "uuid": "c347756a-0b1e-4941-b130-31c5c2d35d86",
              "parentUUID": "e18939f4-f344-48e5-a336-1277452a493c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c347756a-0b1e-4941-b130-31c5c2d35d86"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 843,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7ddb3c4d-65e4-43b5-902a-1af6da96fc74",
          "title": "AniDB Tests",
          "fullFile": "D:\\Desktop\\VueElectron\\list-manager\\test\\api\\anidb\\anidbNameListTest.ts",
          "file": "\\test\\api\\anidb\\anidbNameListTest.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should allow download (1/2)",
              "fullTitle": "AniDB Tests should allow download (1/2)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var x = new anidb_provider_1.default(false);\nanidb_provider_1.default['anidbNameManager'].lastDownloadTime = undefined;\nassert_1.deepEqual(x.InternalTesting().needDownload(), true);\nreturn;",
              "err": {},
              "uuid": "5d3036e9-4b94-46a8-944f-2919438324e5",
              "parentUUID": "7ddb3c4d-65e4-43b5-902a-1af6da96fc74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow download (2/2)",
              "fullTitle": "AniDB Tests should allow download (2/2)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var a = new anidb_provider_1.default(false);\nvar twoDaysInMs = 172800000;\nanidb_provider_1.default['anidbNameManager'].lastDownloadTime = new Date(Date.now() - twoDaysInMs * 2);\nassert_1.deepEqual(a.InternalTesting().needDownload(), true);\nreturn;",
              "err": {},
              "uuid": "73ccae50-abfe-4340-9383-1e1903e0688c",
              "parentUUID": "7ddb3c4d-65e4-43b5-902a-1af6da96fc74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not allow download",
              "fullTitle": "AniDB Tests should not allow download",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var a = new anidb_provider_1.default(false);\nanidb_provider_1.default['anidbNameManager'].lastDownloadTime = new Date(Date.now());\nassert_1.deepEqual(a.InternalTesting().needDownload(), false);\nreturn;",
              "err": {},
              "uuid": "f65b3480-96b1-495d-9cd4-637f79748687",
              "parentUUID": "7ddb3c4d-65e4-43b5-902a-1af6da96fc74",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5d3036e9-4b94-46a8-944f-2919438324e5",
            "73ccae50-abfe-4340-9383-1e1903e0688c",
            "f65b3480-96b1-495d-9cd4-637f79748687"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "196c36be-ce65-495b-b0e0-71d0dcb8934b",
          "title": "AniListApi Tests",
          "fullFile": "D:\\Desktop\\VueElectron\\list-manager\\test\\api\\anilist\\anilistApiTest.ts",
          "file": "\\test\\api\\anilist\\anilistApiTest.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return headers",
              "fullTitle": "AniListApi Tests should return headers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var options = {\n    uri: 'https://graphql.anilist.co',\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n    },\n    body: JSON.stringify({\n        query: \"query\",\n        variables: \"variables\"\n    })\n};\nconst a = new anilist_provider_1.default();\nconst result = a[\"getGraphQLOptions\"](\"query\", \"variables\");\nassert_1.default.equal(options.body, result.body);\nassert_1.default.equal(options.headers + '', result.headers + '');\nassert_1.default.equal(options.method, result.method);\nassert_1.default.equal(options.uri, result.uri);\nreturn;",
              "err": {},
              "uuid": "02f032ed-a0c7-4988-a0e9-9f5f64089d6a",
              "parentUUID": "196c36be-ce65-495b-b0e0-71d0dcb8934b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "02f032ed-a0c7-4988-a0e9-9f5f64089d6a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e0dfdec6-b7c0-4476-8387-895132bccae6",
          "title": "AniListConverter Tests",
          "fullFile": "D:\\Desktop\\VueElectron\\list-manager\\test\\api\\anilist\\anilistConverterTest.ts",
          "file": "\\test\\api\\anilist\\anilistConverterTest.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should convert",
              "fullTitle": "AniListConverter Tests should convert",
              "timedOut": false,
              "duration": 29,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var rawdata = JSON.parse(fs_1.readFileSync(\"./test/api/anilist/testResponse/anilistUserListResponse.json\", { encoding: \"UTF-8\" }));\nvar collection = rawdata.data.MediaListCollection;\nvar entry = collection.lists[2].entries[3];\nvar anime = await anilist_converter_1.default.convertListEntryToAnime(entry, series_1.WatchStatus.COMPLETED);\nconst providerInfo = anime.getListProvidersInfos()[0];\nconst highestWatchedResult = providerInfo.getHighestWatchedEpisode();\nif (highestWatchedResult) {\n    assert_1.default.strictEqual(highestWatchedResult.episode, 1);\n}\nelse {\n    assert_1.default.fail();\n}\nassert_1.default.strictEqual(await anime.getMaxEpisode(), 1);\nassert_1.default.strictEqual(providerInfo.watchStatus, series_1.WatchStatus.COMPLETED);\nassert_1.default.strictEqual(providerInfo.score, 60);\nreturn;",
              "err": {},
              "uuid": "b69925c2-d7f4-4fe9-a6e5-80819a971d8b",
              "parentUUID": "e0dfdec6-b7c0-4476-8387-895132bccae6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should convert format",
              "fullTitle": "AniListConverter Tests should convert format",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const movieResult = await anilist_converter_1.default['convertTypeToMediaType'](mediaFormat_1.MediaFormat.MOVIE);\nconst tvResult = await anilist_converter_1.default['convertTypeToMediaType'](mediaFormat_1.MediaFormat.TV);\nconst tvShortResult = await anilist_converter_1.default['convertTypeToMediaType'](mediaFormat_1.MediaFormat.TV_SHORT);\nassert_1.default.strictEqual(movieResult, media_type_1.MediaType.MOVIE);\nassert_1.default.strictEqual(tvResult, media_type_1.MediaType.SERIES);\nassert_1.default.strictEqual(tvShortResult, media_type_1.MediaType.SERIES);\nreturn;",
              "err": {},
              "uuid": "3a857317-b0a0-4b61-9a8b-360d4840117f",
              "parentUUID": "e0dfdec6-b7c0-4476-8387-895132bccae6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b69925c2-d7f4-4fe9-a6e5-80819a971d8b",
            "3a857317-b0a0-4b61-9a8b-360d4840117f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 29,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "89974064-7d39-416f-9c7d-79c59a22d35b",
          "title": "TVDB Tests",
          "fullFile": "D:\\Desktop\\VueElectron\\list-manager\\test\\api\\tvdb\\tvdbProviderTest.ts",
          "file": "\\test\\api\\tvdb\\tvdbProviderTest.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should get access key",
              "fullTitle": "TVDB Tests should get access key",
              "timedOut": false,
              "duration": 657,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var x = new tvdb_provider_1.default();\nconst token = await x['getAccessKey']();\nassert_1.notStrictEqual(token, \"\");\nassert_1.notStrictEqual(token, null);\nassert_1.notStrictEqual(token, undefined);\nreturn;",
              "err": {},
              "uuid": "6aae0403-d6d6-471e-b0aa-96ffa952e594",
              "parentUUID": "89974064-7d39-416f-9c7d-79c59a22d35b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6aae0403-d6d6-471e-b0aa-96ffa952e594"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 657,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "31777003-90b0-4ff7-8557-314b947a66a5",
          "title": "ListControllerTest | Combine",
          "fullFile": "D:\\Desktop\\VueElectron\\list-manager\\test\\controller\\listControllerTest.ts",
          "file": "\\test\\controller\\listControllerTest.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "ListControllerTest | Combine \"before all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "provider_list_1.default['loadedListProvider'] = [];\nprovider_list_1.default['loadedInfoProvider'] = [];\nmain_list_manager_1.default['listLoaded'] = true;",
              "err": {},
              "uuid": "fd30b865-df69-49bd-aa38-6dd3dad9efd4",
              "parentUUID": "31777003-90b0-4ff7-8557-314b947a66a5",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "ListControllerTest | Combine \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "main_list_manager_1.default['mainList'] = [];",
              "err": {},
              "uuid": "598fee7e-e4e3-4a63-97b3-30931f875819",
              "parentUUID": "31777003-90b0-4ff7-8557-314b947a66a5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should combine same entry",
              "fullTitle": "ListControllerTest | Combine should combine same entry",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var entry = [];\nentry.push(getFilledAnime());\nentry.push(getFilledAnime());\nvar a = await lc['addSeriesToMainList'](...entry);\nassert.equal(main_list_manager_1.default['mainList'].length, 1);",
              "err": {},
              "uuid": "4c42e48c-0c14-4cc3-bfde-52aff5b4837a",
              "parentUUID": "31777003-90b0-4ff7-8557-314b947a66a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should combine basic entrys correct",
              "fullTitle": "ListControllerTest | Combine should combine basic entrys correct",
              "timedOut": false,
              "duration": 32,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var entry = [];\nentry.push(getFilledAnime(\"Test A\"));\nentry.push(getFilledAnime(\"Test B\"));\nfor (let index = 0; index < 20; index++) {\n    entry.push(getRandomeFilledAnime());\n}\nvar a = await lc['addSeriesToMainList'](...entry);\nassert.equal(main_list_manager_1.default['mainList'].length, 21);",
              "err": {},
              "uuid": "b02dfc52-81b0-4456-835e-04060898d750",
              "parentUUID": "31777003-90b0-4ff7-8557-314b947a66a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should combine basic entrys with less data",
              "fullTitle": "ListControllerTest | Combine should combine basic entrys with less data",
              "timedOut": false,
              "duration": 52,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var entry = [];\nvar x2 = getFilledAnime(\"Test A\");\nx2.episodes = undefined;\nx2.releaseYear = undefined;\nentry.push(x2);\nentry.push(getFilledAnime(\"Test B\"));\nfor (let index = 0; index < 20; index++) {\n    entry.push(getRandomeFilledAnime());\n}\nvar a = await lc['addSeriesToMainList'](...entry);\nassert.equal(main_list_manager_1.default['mainList'].length, 21);\nreturn;",
              "err": {},
              "uuid": "9c2f43fb-c53d-47df-8ed2-81784ee59d79",
              "parentUUID": "31777003-90b0-4ff7-8557-314b947a66a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should combine basic entrys with season in title (1/4)",
              "fullTitle": "ListControllerTest | Combine should combine basic entrys with season in title (1/4)",
              "timedOut": false,
              "duration": 56,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var entry = [];\nvar x2 = getFilledAnime(\"TestA\");\nx2.getListProvidersInfos()[0].targetSeason = undefined;\nx2.addSeriesName(new name_1.default(\"Test III\", \"en\"));\nentry.push(x2);\nentry.push(getFilledAnime(\"TestB\"));\nfor (let index = 0; index < 20; index++) {\n    entry.push(getRandomeFilledAnime());\n}\nvar a = await lc['addSeriesToMainList'](...entry);\nassert.equal(main_list_manager_1.default['mainList'].length, 21);\nreturn;",
              "err": {},
              "uuid": "0ac6d69a-4d03-4bac-ba13-9bc0ffafea8f",
              "parentUUID": "31777003-90b0-4ff7-8557-314b947a66a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should combine basic entrys with season in title (2/4)",
              "fullTitle": "ListControllerTest | Combine should combine basic entrys with season in title (2/4)",
              "timedOut": false,
              "duration": 28,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var entry = [];\nvar x2 = getFilledAnime(\"TestA\");\nx2.getListProvidersInfos()[0].targetSeason = undefined;\nx2.addSeriesName(new name_1.default(\"Test 3\", \"en\"));\nentry.push(x2);\nentry.push(getFilledAnime(\"TestB\"));\nfor (let index = 0; index < 20; index++) {\n    entry.push(getRandomeFilledAnime());\n}\nvar a = await lc['addSeriesToMainList'](...entry);\nassert.equal(main_list_manager_1.default['mainList'].length, 21);\nreturn;",
              "err": {},
              "uuid": "ab941451-fc95-4850-a9bc-bd9a33c7bd43",
              "parentUUID": "31777003-90b0-4ff7-8557-314b947a66a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should combine basic entrys with season in title (3/4)",
              "fullTitle": "ListControllerTest | Combine should combine basic entrys with season in title (3/4)",
              "timedOut": false,
              "duration": 93,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var entry = [];\nvar x2 = getFilledAnime(\"TestA\");\nx2.addSeriesName(new name_1.default(\"Test Season 3\", \"en\"));\nx2.releaseYear = 0;\nx2.episodes = 0;\nentry.push(x2);\nentry.push(getFilledAnime(\"TestB\"));\nfor (let index = 0; index < 20; index++) {\n    entry.push(getRandomeFilledAnime());\n}\nvar a = await lc['addSeriesToMainList'](...entry);\nassert.equal(main_list_manager_1.default['mainList'].length, 21);\nreturn;",
              "err": {},
              "uuid": "0b318a78-e2cf-4ee1-8cd5-6f02e599adc7",
              "parentUUID": "31777003-90b0-4ff7-8557-314b947a66a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should combine basic entrys with season in title (4/5)",
              "fullTitle": "ListControllerTest | Combine should combine basic entrys with season in title (4/5)",
              "timedOut": false,
              "duration": 31,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var entry = [];\nlet x = getFilledAnime(\"TestA\");\nx.addSeriesName(new name_1.default(\"Test\", \"en\"));\nvar x2 = getFilledAnime(\"TestB\");\nx2.addSeriesName(new name_1.default(\"Test x\", \"en\"));\nx2.releaseYear = 0;\nx2.episodes = 0;\nentry.push(x2);\nentry.push(x);\nfor (let index = 0; index < 22; index++) {\n    entry.push(getRandomeFilledAnime());\n}\nvar a = await lc['addSeriesToMainList'](...entry);\nassert.equal(main_list_manager_1.default['mainList'].length, 23);\nreturn;",
              "err": {},
              "uuid": "6f304923-76f1-4125-8c95-340c42464d9e",
              "parentUUID": "31777003-90b0-4ff7-8557-314b947a66a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should combine (4/4)",
              "fullTitle": "ListControllerTest | Combine should combine (4/4)",
              "timedOut": false,
              "duration": 63,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var entry = [];\nlet x = getFilledAnime();\nx.releaseYear = 2002;\nx.episodes = 220;\nvar x2 = getFilledAnime();\nx2.releaseYear = 2002;\nx2.episodes = 220;\nentry.push(x2);\nentry.push(x);\nfor (let index = 0; index < 22; index++) {\n    entry.push(getRandomeFilledAnime());\n}\nvar a = await lc['addSeriesToMainList'](...entry);\nassert.equal(main_list_manager_1.default['mainList'].length, 23);\nreturn;",
              "err": {},
              "uuid": "14b86b7e-1a29-4e34-9575-53070ac1111b",
              "parentUUID": "31777003-90b0-4ff7-8557-314b947a66a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should combine 6",
              "fullTitle": "ListControllerTest | Combine should combine 6",
              "timedOut": false,
              "duration": 737,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const testListProvider1 = new testProvider_1.default('test', false);\ntestListProvider1.hasUniqueIdForSeasons = true;\nconst testListProvider2 = new testProvider_1.default('test2', false);\ntestListProvider1.hasUniqueIdForSeasons = false;\nprovider_list_1.default['loadedListProvider'] = [];\nprovider_list_1.default['loadedListProvider'].push(testListProvider1, testListProvider2);\nvar entry = [];\nconst lplc = new list_provider_local_data_1.ListProviderLocalData('test');\nlplc.prequelIds.push(1);\nlplc.id = 2;\nlet x = new series_1.default();\nx['cachedSeason'] = 2;\nx.releaseYear = 2017;\nx.episodes = 11;\nx.addSeriesName(new name_1.default(\"Test\", \"unkown\", name_type_1.NameType.UNKNOWN));\nconst lplcs1 = new list_provider_local_data_1.ListProviderLocalData('test');\nlplcs1.sequelIds.push(2);\nlplcs1.id = 1;\nlet xs1 = new series_1.default();\nxs1['cachedSeason'] = 1;\nxs1.addSeriesName(new name_1.default(\"Rewrite\", \"en\", name_type_1.NameType.OFFICIAL));\nconst lplc2 = new list_provider_local_data_1.ListProviderLocalData('test2');\nlplc.targetSeason = 2;\nvar x2 = new series_1.default();\nx2.addSeriesName(new name_1.default(\"Rewrite\", \"en\", name_type_1.NameType.OFFICIAL));\nx2.addSeriesName(new name_1.default(\"rewrite\", \"slug\", name_type_1.NameType.SLUG));\nx2.addSeriesName(new name_1.default(\"リライト\", \"ja\", name_type_1.NameType.UNKNOWN));\nx2.addListProvider(lplc);\nvar a = await lc['addSeriesToMainList'](x, x2, xs1);\nassert.equal(main_list_manager_1.default['mainList'].length, 2);\nreturn;",
              "err": {
                "message": "AssertionError: 3 == 2",
                "estack": "AssertionError [ERR_ASSERTION]: 3 == 2\n    at Context.<anonymous> (test\\controller\\listControllerTest.ts:161:16)",
                "diff": "- 3\n+ 2\n"
              },
              "uuid": "3e309174-970e-4ed7-97f4-9f83d7d26a9b",
              "parentUUID": "31777003-90b0-4ff7-8557-314b947a66a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should sort list",
              "fullTitle": "ListControllerTest | Combine should sort list",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var entry = [];\nvar x2 = getFilledAnime();\nx2.addSeriesName(new name_1.default(\"A\", \"en\"));\nvar x3 = getFilledAnime();\nx3.addSeriesName(new name_1.default(\"B\", \"en\"));\nvar x4 = getFilledAnime();\nx4.addSeriesName(new name_1.default(\"C\", \"en\"));\nvar x5 = getFilledAnime();\nx5.addSeriesName(new name_1.default(\"D\", \"en\"));\nvar x6 = getFilledAnime();\nx6.addSeriesName(new name_1.default(\"E\", \"en\"));\nvar x7 = getFilledAnime();\nx7.addSeriesName(new name_1.default(\"F\", \"en\"));\nentry.push(x7);\nentry.push(x6);\nentry.push(x5);\nentry.push(x4);\nentry.push(x3);\nentry.push(x2);\nentry = await list_helper_1.default.shuffle(entry);\nentry = await list_helper_1.default.sortList(entry);\nassert.equal(await entry[0].getAllNames(), await x2.getAllNames());\nassert.equal(await entry[1].getAllNames(), await x3.getAllNames());\nassert.equal(await entry[2].getAllNames(), await x4.getAllNames());\nreturn;",
              "err": {
                "message": "AssertionError: [\n  Name {\n    lang: 'en',\n    name: 'Test',\n    nameType: 'unkown'\n  },\n  Name {\n    lang: 'en',\n    name: 'A',\n    nameType: 'unkown'\n  }\n] == [\n  Name {\n    lang: 'en',\n    name: 'Test',\n    nameType: 'unkown'\n  },\n  Name {\n    lang: 'en',\n    name: 'A',\n    nameType: 'unkown'\n  }\n]",
                "estack": "AssertionError [ERR_ASSERTION]: [\n  Name {\n    lang: 'en',\n    name: 'Test',\n    nameType: 'unkown'\n  },\n  Name {\n    lang: 'en',\n    name: 'A',\n    nameType: 'unkown'\n  }\n] == [\n  Name {\n    lang: 'en',\n    name: 'Test',\n    nameType: 'unkown'\n  },\n  Name {\n    lang: 'en',\n    name: 'A',\n    nameType: 'unkown'\n  }\n]\n    at Context.<anonymous> (test\\controller\\listControllerTest.ts:186:16)",
                "diff": ""
              },
              "uuid": "903938d3-3abc-4719-b142-937edc440673",
              "parentUUID": "31777003-90b0-4ff7-8557-314b947a66a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should clean doubled entrys (1/2)",
              "fullTitle": "ListControllerTest | Combine should clean doubled entrys (1/2)",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var lpld = new list_provider_local_data_1.ListProviderLocalData();\nlpld.id = 2;\nlpld.episodes = 12;\nlpld.targetSeason = 1;\nvar x1 = getFilledAnime();\nx1.getListProvidersInfos()[0].targetSeason = 1;\nx1.addListProvider(lpld);\nvar x2 = getFilledAnime();\nx2.addListProvider(lpld);\nx2.getListProvidersInfos()[0].targetSeason = 1;\nvar x3 = getFilledAnime();\nx3.addListProvider(lpld);\nx3.getListProvidersInfos()[0].targetSeason = 1;\nawait lc.addSeriesToMainList(x1, x2, x3);\nassert.equal(main_list_manager_1.default['mainList'].length, 1);",
              "err": {},
              "uuid": "6770bfa5-f467-4109-bbfb-1afa03d62c74",
              "parentUUID": "31777003-90b0-4ff7-8557-314b947a66a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should clean doubled entrys (3/3)",
              "fullTitle": "ListControllerTest | Combine should clean doubled entrys (3/3)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var lpld = new list_provider_local_data_1.ListProviderLocalData();\nlpld.id = 2;\nlpld.episodes = 12;\nlpld.targetSeason = 1;\nvar x1 = getFilledAnime();\nx1.getListProvidersInfos()[0].targetSeason = 1;\nx1.addListProvider(lpld);\nvar x2 = getFilledAnime();\nx2.addListProvider(lpld);\nx2.getListProvidersInfos()[0].targetSeason = undefined;\nmain_list_manager_1.default['mainList'] = [x1, x2];\nawait lc.addSeriesToMainList(x1, x2);\nassert.equal(main_list_manager_1.default['mainList'].length, 1);",
              "err": {},
              "uuid": "9946ac99-c8fc-40db-a35d-be98415da23b",
              "parentUUID": "31777003-90b0-4ff7-8557-314b947a66a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shouldnt clean doubled entrys (1/2)",
              "fullTitle": "ListControllerTest | Combine shouldnt clean doubled entrys (1/2)",
              "timedOut": false,
              "duration": 36,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var lpld = new list_provider_local_data_1.ListProviderLocalData(\"TestA\");\nlpld.id = 2;\nlpld.episodes = 12;\nvar lpld2 = new list_provider_local_data_1.ListProviderLocalData(\"TestB\");\nlpld2.id = 3;\nlpld2.episodes = 12;\nvar x1 = getFilledAnime();\nx1.getListProvidersInfos()[0].targetSeason = 1;\nx1.addListProvider(lpld);\nvar x2 = getFilledAnime();\nx2.getListProvidersInfos()[0].targetSeason = 2;\nx2.addListProvider(lpld2);\nconsole.log(x1);\nconsole.log(x2);\nawait lc.addSeriesToMainList(x1, x2);\nassert.equal(main_list_manager_1.default['mainList'].length, 2);",
              "err": {},
              "uuid": "b9e3b4fe-4302-4f6b-b362-595020202784",
              "parentUUID": "31777003-90b0-4ff7-8557-314b947a66a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shouldnt clean doubled entrys (2/2)",
              "fullTitle": "ListControllerTest | Combine shouldnt clean doubled entrys (2/2)",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var lpld = new list_provider_local_data_1.ListProviderLocalData(\"Test\");\nlpld.id = 2;\nlpld.episodes = 12;\nvar lpld2 = new list_provider_local_data_1.ListProviderLocalData(\"Test\");\nlpld2.id = 3;\nlpld2.episodes = 12;\nvar x1 = getFilledAnime();\nx1.getListProvidersInfos()[0].targetSeason = undefined;\nx1.addListProvider(lpld);\nvar x2 = getFilledAnime();\nx2.getListProvidersInfos()[0].targetSeason = undefined;\nx2.addListProvider(lpld2);\nmain_list_manager_1.default['mainList'] = [x1, x2];\nconst x = await lc.addSeriesToMainList(x1, x2);\nassert.equal(main_list_manager_1.default['mainList'].length, 2);",
              "err": {},
              "uuid": "41c8926b-01ab-4b09-abbf-b8d6e0cee912",
              "parentUUID": "31777003-90b0-4ff7-8557-314b947a66a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should clean doubled entrys (2/2)",
              "fullTitle": "ListControllerTest | Combine should clean doubled entrys (2/2)",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var lpld = new list_provider_local_data_1.ListProviderLocalData(\"Test\");\nlpld.id = 2;\nlpld.episodes = 12;\nvar x1 = getFilledAnime();\nx1.getListProvidersInfos()[0].targetSeason = undefined;\nx1.addListProvider(lpld);\nvar x2 = getFilledAnime();\nx2.getListProvidersInfos()[0].targetSeason = undefined;\nx2.addListProvider(lpld);\nmain_list_manager_1.default['mainList'] = [x1, x2];\nawait lc.addSeriesToMainList(x1, x2);\nassert.equal(main_list_manager_1.default['mainList'].length, 1);",
              "err": {},
              "uuid": "b5d50867-b907-45ca-b1c0-c64a18bf5e36",
              "parentUUID": "31777003-90b0-4ff7-8557-314b947a66a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should clean doubled entrys (2/3)",
              "fullTitle": "ListControllerTest | Combine should clean doubled entrys (2/3)",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var lpld = new list_provider_local_data_1.ListProviderLocalData();\nlpld.id = 2;\nlpld.episodes = 12;\nvar x1 = getFilledAnime();\nx1.getListProvidersInfos()[0].targetSeason = undefined;\nx1.addListProvider(lpld);\nvar x2 = getFilledAnime();\nx2.getListProvidersInfos()[0].targetSeason = 1;\nx2.addListProvider(lpld);\nmain_list_manager_1.default['mainList'] = [x1, x2];\nawait lc.addSeriesToMainList(x1, x2);\nassert.equal(main_list_manager_1.default['mainList'].length, 1);",
              "err": {},
              "uuid": "4754238e-2a82-4caa-a9e0-7d3e398fd832",
              "parentUUID": "31777003-90b0-4ff7-8557-314b947a66a5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4c42e48c-0c14-4cc3-bfde-52aff5b4837a",
            "b02dfc52-81b0-4456-835e-04060898d750",
            "9c2f43fb-c53d-47df-8ed2-81784ee59d79",
            "0ac6d69a-4d03-4bac-ba13-9bc0ffafea8f",
            "ab941451-fc95-4850-a9bc-bd9a33c7bd43",
            "0b318a78-e2cf-4ee1-8cd5-6f02e599adc7",
            "6f304923-76f1-4125-8c95-340c42464d9e",
            "14b86b7e-1a29-4e34-9575-53070ac1111b",
            "6770bfa5-f467-4109-bbfb-1afa03d62c74",
            "9946ac99-c8fc-40db-a35d-be98415da23b",
            "b9e3b4fe-4302-4f6b-b362-595020202784",
            "41c8926b-01ab-4b09-abbf-b8d6e0cee912",
            "b5d50867-b907-45ca-b1c0-c64a18bf5e36",
            "4754238e-2a82-4caa-a9e0-7d3e398fd832"
          ],
          "failures": [
            "3e309174-970e-4ed7-97f4-9f83d7d26a9b",
            "903938d3-3abc-4719-b142-937edc440673"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1163,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0b35d6d7-6321-44a2-85d6-1045b9c102c2",
          "title": "infoProviderLocalData tests",
          "fullFile": "D:\\Desktop\\VueElectron\\list-manager\\test\\controller\\objects\\InfoProviderLocalDataTest.ts",
          "file": "\\test\\controller\\objects\\InfoProviderLocalDataTest.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should merge two",
              "fullTitle": "infoProviderLocalData tests should merge two",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const a = new info_provider_local_data_1.InfoProviderLocalData();\na.id = 1;\na.episodes = 13;\na.publicScore = 20;\na.lastUpdate = new Date(0);\nconst b = new info_provider_local_data_1.InfoProviderLocalData();\nb.id = 1;\nb.episodes = 14;\nb.publicScore = 20;\nb.score = 40;\nb.covers.push(new Cover_1.default(\"\"));\nconst merged = await info_provider_local_data_1.InfoProviderLocalData.mergeProviderInfos(a, b);\nassert_1.strictEqual(merged.covers.length, 1, \"Cover merge failed\");\nassert_1.strictEqual(merged.episodes, 14, \"Episodes merge failed\");\nassert_1.strictEqual(merged.publicScore, 20, \"Public score merge failed\");\nassert_1.strictEqual(merged.score, 40, \"Score merge failed\");\nreturn;",
              "err": {},
              "uuid": "b6306aef-6ec4-47a4-8bc6-879dc98ccdfb",
              "parentUUID": "0b35d6d7-6321-44a2-85d6-1045b9c102c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should merge three",
              "fullTitle": "infoProviderLocalData tests should merge three",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const a = new info_provider_local_data_1.InfoProviderLocalData();\na.id = 1;\na.episodes = 13;\na.publicScore = 20;\na.lastUpdate = new Date(0);\na.covers.push(new Cover_1.default(\"c\"));\nconst b = new info_provider_local_data_1.InfoProviderLocalData();\nb.id = 1;\nb.episodes = 14;\nb.publicScore = 20;\nb.lastUpdate = new Date(1);\nconst c = new info_provider_local_data_1.InfoProviderLocalData();\nc.id = 1;\nc.episodes = 15;\nc.publicScore = 20;\nc.lastUpdate = new Date(20000);\nc.covers.push(new Cover_1.default(\"x\"));\nconst merged = await info_provider_local_data_1.InfoProviderLocalData.mergeProviderInfos(a, b, c);\nassert_1.strictEqual(merged.covers.length, 2, \"Cover merge failed\");\nassert_1.strictEqual(merged.episodes, 15, \"Episodes merge failed\");\nassert_1.strictEqual(merged.publicScore, 20, \"Public score merge failed\");\nassert_1.strictEqual(merged.lastUpdate.getTime(), 20000, \"Last update merge failed\");\nreturn;",
              "err": {},
              "uuid": "75923348-2f6d-4d09-ba28-ebdb6c0709b7",
              "parentUUID": "0b35d6d7-6321-44a2-85d6-1045b9c102c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not merge same cover",
              "fullTitle": "infoProviderLocalData tests should not merge same cover",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const a = new info_provider_local_data_1.InfoProviderLocalData();\na.id = 1;\na.episodes = 13;\na.publicScore = 20;\na.lastUpdate = new Date(0);\na.covers.push(new Cover_1.default(\"c\"));\nconst b = new info_provider_local_data_1.InfoProviderLocalData();\nb.id = 1;\nb.episodes = 14;\nb.publicScore = 20;\nb.lastUpdate = new Date(1);\nconst c = new info_provider_local_data_1.InfoProviderLocalData();\nc.id = 1;\nc.episodes = 15;\nc.publicScore = 20;\nc.score = 40;\nc.lastUpdate = new Date(2);\nc.covers.push(new Cover_1.default(\"c\"));\nconst merged = await info_provider_local_data_1.InfoProviderLocalData.mergeProviderInfos(c, b, a);\nassert_1.strictEqual(merged.covers.length, 1, \"Cover merge failed\");\nassert_1.strictEqual(merged.episodes, 15);\nassert_1.strictEqual(merged.publicScore, 20);\nassert_1.strictEqual(merged.lastUpdate.getTime(), 2);\nassert_1.strictEqual(merged.score, 40);\nreturn;",
              "err": {},
              "uuid": "a10bf6cc-3ed3-4a50-a6c0-0687fe3f3460",
              "parentUUID": "0b35d6d7-6321-44a2-85d6-1045b9c102c2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b6306aef-6ec4-47a4-8bc6-879dc98ccdfb",
            "75923348-2f6d-4d09-ba28-ebdb6c0709b7",
            "a10bf6cc-3ed3-4a50-a6c0-0687fe3f3460"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2fbdd928-9d64-40d4-82f6-e7a70dba6a3b",
          "title": "listProviderLocalData tests",
          "fullFile": "D:\\Desktop\\VueElectron\\list-manager\\test\\controller\\objects\\listProviderLocalDataTest.ts",
          "file": "\\test\\controller\\objects\\listProviderLocalDataTest.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should merge two",
              "fullTitle": "listProviderLocalData tests should merge two",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const a = new list_provider_local_data_1.ListProviderLocalData();\na.id = 1;\na.episodes = 13;\na.publicScore = 20;\na.lastUpdate = new Date(0);\na.targetSeason = 5;\na.watchStatus = series_1.WatchStatus.CURRENT;\nconst b = new list_provider_local_data_1.ListProviderLocalData();\nb.id = 1;\nb.episodes = 14;\nb.publicScore = 20;\nb.score = 40;\nb.hasFullInfo = false;\nb.watchStatus = series_1.WatchStatus.COMPLETED;\nb.covers.push(new Cover_1.default(\"\"));\nconst merged = await list_provider_local_data_1.ListProviderLocalData.mergeProviderInfos(a, b);\nassert_1.strictEqual(merged.covers.length, 1, \"Cover merge failed\");\nassert_1.strictEqual(merged.episodes, 14, \"Episodes merge failed\");\nassert_1.strictEqual(merged.publicScore, 20, \"Public score merge failed\");\nassert_1.strictEqual(merged.score, 40, \"Score merge failed\");\nassert_1.strictEqual(merged.hasFullInfo, false, \"Should add latest hasFullInfo\");\nassert_1.strictEqual(merged.targetSeason, 5, \"Should merge targetSeason\");\nassert_1.strictEqual(merged.watchStatus, series_1.WatchStatus.COMPLETED, \"Should add latest watch status\");\nreturn;",
              "err": {},
              "uuid": "f592aa71-1549-49f8-8c10-e0f197d007f4",
              "parentUUID": "2fbdd928-9d64-40d4-82f6-e7a70dba6a3b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should merge three",
              "fullTitle": "listProviderLocalData tests should merge three",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const a = new list_provider_local_data_1.ListProviderLocalData();\na.id = 1;\na.episodes = 13;\na.publicScore = 20;\na.lastUpdate = new Date(0);\na.covers.push(new Cover_1.default(\"c\"));\nconst b = new list_provider_local_data_1.ListProviderLocalData();\nb.id = 1;\nb.episodes = 14;\nb.publicScore = 20;\nb.lastUpdate = new Date(1);\nconst c = new list_provider_local_data_1.ListProviderLocalData();\nc.id = 1;\nc.episodes = 15;\nc.publicScore = 20;\nc.lastUpdate = new Date(20000);\nc.covers.push(new Cover_1.default(\"x\"));\nconst merged = await list_provider_local_data_1.ListProviderLocalData.mergeProviderInfos(a, b, c);\nassert_1.strictEqual(merged.covers.length, 2, \"Cover merge failed\");\nassert_1.strictEqual(merged.episodes, 15, \"Episodes merge failed\");\nassert_1.strictEqual(merged.publicScore, 20, \"Public score merge failed\");\nassert_1.strictEqual(merged.lastUpdate.getTime(), new Date(20000).getTime(), \"Last update merge failed\");\nreturn;",
              "err": {},
              "uuid": "c2af3bb6-2f9c-4cf3-8ce6-80791c50e3a1",
              "parentUUID": "2fbdd928-9d64-40d4-82f6-e7a70dba6a3b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not merge same cover",
              "fullTitle": "listProviderLocalData tests should not merge same cover",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const a = new list_provider_local_data_1.ListProviderLocalData();\na.id = 1;\na.episodes = 13;\na.publicScore = 20;\na.lastUpdate = new Date(0);\na.covers.push(new Cover_1.default(\"c\"));\nconst b = new list_provider_local_data_1.ListProviderLocalData();\nb.id = 1;\nb.episodes = 14;\nb.publicScore = 20;\nb.lastUpdate = new Date(1);\nconst c = new list_provider_local_data_1.ListProviderLocalData();\nc.id = 1;\nc.episodes = 15;\nc.publicScore = 20;\nc.score = 40;\nc.lastUpdate = new Date(2);\nc.covers.push(new Cover_1.default(\"c\"));\nconst merged = await list_provider_local_data_1.ListProviderLocalData.mergeProviderInfos(c, b, a);\nassert_1.strictEqual(merged.covers.length, 1);\nassert_1.strictEqual(merged.episodes, 15);\nassert_1.strictEqual(merged.publicScore, 20);\nassert_1.strictEqual(merged.lastUpdate.getTime(), 2);\nassert_1.strictEqual(merged.score, 40);\nreturn;",
              "err": {},
              "uuid": "103eb620-305a-48de-ab0f-4316d31bca86",
              "parentUUID": "2fbdd928-9d64-40d4-82f6-e7a70dba6a3b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f592aa71-1549-49f8-8c10-e0f197d007f4",
            "c2af3bb6-2f9c-4cf3-8ce6-80791c50e3a1",
            "103eb620-305a-48de-ab0f-4316d31bca86"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "db4576eb-a200-42da-85d2-f3270c8cdad1",
          "title": "namesTest",
          "fullFile": "D:\\Desktop\\VueElectron\\list-manager\\test\\controller\\objects\\namesTest.ts",
          "file": "\\test\\controller\\objects\\namesTest.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should detect kanji",
              "fullTitle": "namesTest should detect kanji",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(await string_helper_1.default.hasKanji('テスト'), true);\nassert.equal(await string_helper_1.default.hasKanji('test'), false);\nreturn;",
              "err": {},
              "uuid": "eed47a73-8d76-4c28-9107-1b5f3101a5ac",
              "parentUUID": "db4576eb-a200-42da-85d2-f3270c8cdad1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should extract season number from title",
              "fullTitle": "namesTest should extract season number from title",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(await string_helper_1.default.getSeasonNumberFromTitle('Title 2'), 2, 'Title 2');\nassert.equal(await string_helper_1.default.getSeasonNumberFromTitle('Title II'), 2, 'Title II');\nassert.equal(await string_helper_1.default.getSeasonNumberFromTitle('Title III'), 3, 'Title III');\nassert.equal(await string_helper_1.default.getSeasonNumberFromTitle('Title 2nd Season'), 2, 'Title 2nd Season');\nassert.equal(await string_helper_1.default.getSeasonNumberFromTitle('Title 3nd Season -Test-'), 3, 'Title 3nd Season -Test-');\nassert.equal(await string_helper_1.default.getSeasonNumberFromTitle('Title Season 2 -Test-'), 2, 'Title Season 2 -Test-');\nreturn;",
              "err": {},
              "uuid": "eb60c664-bf9e-42a7-b963-f93d9365c298",
              "parentUUID": "db4576eb-a200-42da-85d2-f3270c8cdad1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should detect no romaji name",
              "fullTitle": "namesTest should detect no romaji name",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const names = [];\nnames.push(new name_1.default('テスト', 'jap'));\ntry {\n    await name_1.default.getRomajiName(names);\n    assert.equal(false, true);\n}\ncatch (err) {\n    assert.equal(true, true);\n}\nreturn;",
              "err": {},
              "uuid": "885a720d-796f-4dcd-a928-38bf0fe7047e",
              "parentUUID": "db4576eb-a200-42da-85d2-f3270c8cdad1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return romaji name",
              "fullTitle": "namesTest should return romaji name",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const names = [];\nnames.push(new name_1.default('テスト', 'jap'));\nnames.push(new name_1.default('test', 'en'));\nassert.equal(await name_1.default.getRomajiName(names), 'test');\nreturn;",
              "err": {},
              "uuid": "43169604-ac39-4f6e-b15b-0e9bfc3efd3f",
              "parentUUID": "db4576eb-a200-42da-85d2-f3270c8cdad1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "eed47a73-8d76-4c28-9107-1b5f3101a5ac",
            "eb60c664-bf9e-42a7-b963-f93d9365c298",
            "885a720d-796f-4dcd-a928-38bf0fe7047e",
            "43169604-ac39-4f6e-b15b-0e9bfc3efd3f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bf4bcae4-e2fc-4848-8280-b979f025c163",
          "title": "providerTest",
          "fullFile": "D:\\Desktop\\VueElectron\\list-manager\\test\\controller\\objects\\providerInfoTest.ts",
          "file": "\\test\\controller\\objects\\providerInfoTest.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should add to watchlist",
              "fullTitle": "providerTest should add to watchlist",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const providerInfo = new list_provider_local_data_1.ListProviderLocalData();\nproviderInfo.addOneEpisode(1);\nproviderInfo.addOneEpisode(2);\nproviderInfo.addOneEpisode(3);\nif (typeof providerInfo.watchProgress != 'undefined') {\n    assert.equal(providerInfo.watchProgress.length, 3);\n}\nelse {\n    assert.notEqual(typeof providerInfo.watchProgress, 'undefined');\n}\nreturn;",
              "err": {},
              "uuid": "a8c924bf-8953-4240-9e47-c5350dbca5d7",
              "parentUUID": "bf4bcae4-e2fc-4848-8280-b979f025c163",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove from watchlist",
              "fullTitle": "providerTest should remove from watchlist",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const providerInfo = new list_provider_local_data_1.ListProviderLocalData();\nproviderInfo.addOneEpisode(1);\nproviderInfo.addOneEpisode(2);\nproviderInfo.addOneEpisode(3);\nproviderInfo.removeOneWatchProgress(new watch_progress_1.default(2));\nif (typeof providerInfo.watchProgress != 'undefined') {\n    assert.equal(providerInfo.watchProgress.length, 2);\n}\nelse {\n    assert.notEqual(typeof providerInfo.watchProgress, 'undefined');\n}\nreturn;",
              "err": {},
              "uuid": "129a6274-4892-40e5-b276-329d3c2b3f39",
              "parentUUID": "bf4bcae4-e2fc-4848-8280-b979f025c163",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the last watched episode",
              "fullTitle": "providerTest should return the last watched episode",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const providerInfo = new list_provider_local_data_1.ListProviderLocalData();\nproviderInfo.addOneEpisode(1);\nproviderInfo.addOneEpisode(2);\nproviderInfo.addOneEpisode(4);\nproviderInfo.addOneEpisode(6);\nconst result = providerInfo.getHighestWatchedEpisode();\nif (typeof result != 'undefined') {\n    assert.equal(result.episode, 6);\n}\nassert.notEqual(typeof result, 'undefined');\nreturn;",
              "err": {},
              "uuid": "9d652ad7-f58b-4207-8cd3-22ca52956b70",
              "parentUUID": "bf4bcae4-e2fc-4848-8280-b979f025c163",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should merge same provider",
              "fullTitle": "providerTest should merge same provider",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const providerInfoA = new list_provider_local_data_1.ListProviderLocalData();\nproviderInfoA.id = 2;\nproviderInfoA.addOneEpisode(1);\nproviderInfoA.episodes = 10;\nproviderInfoA.score = 11;\nproviderInfoA.watchStatus = series_1.WatchStatus.CURRENT;\nproviderInfoA.sequelIds.push(10);\nproviderInfoA.lastUpdate = new Date(10000);\nconst providerInfoB = new list_provider_local_data_1.ListProviderLocalData();\nproviderInfoB.id = 2;\nproviderInfoB.addOneEpisode(1);\nproviderInfoB.addOneEpisode(2);\nproviderInfoB.episodes = 10;\nproviderInfoB.score = 12;\nproviderInfoB.watchStatus = series_1.WatchStatus.COMPLETED;\nproviderInfoB.sequelIds.push(12);\nproviderInfoB.lastUpdate = new Date(20000);\nproviderInfoB.publicScore = 15;\nproviderInfoB.prequelIds.push(105);\nconst providerMerged = await list_provider_local_data_1.ListProviderLocalData.mergeProviderInfos(providerInfoA, providerInfoB);\nconst result = providerMerged.getHighestWatchedEpisode();\nif (typeof result != 'undefined') {\n    assert.equal(result.episode, 2);\n}\nassert.notEqual(typeof result, 'undefined');\nassert.equal(providerMerged.sequelIds, 12);\nassert.equal(providerMerged.score, 12);\nassert.equal(providerMerged.watchStatus, series_1.WatchStatus.COMPLETED);\nassert.equal(providerMerged.publicScore, 15);\nassert.equal(providerMerged.prequelIds, 105);",
              "err": {},
              "uuid": "9a2c2d43-3a6d-476e-9c84-cba97a93f7ab",
              "parentUUID": "bf4bcae4-e2fc-4848-8280-b979f025c163",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a8c924bf-8953-4240-9e47-c5350dbca5d7",
            "129a6274-4892-40e5-b276-329d3c2b3f39",
            "9d652ad7-f58b-4207-8cd3-22ca52956b70",
            "9a2c2d43-3a6d-476e-9c84-cba97a93f7ab"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "98f24de8-e0ad-4a9e-94bc-5981930cf224",
          "title": "seriesTest | Relations",
          "fullFile": "D:\\Desktop\\VueElectron\\list-manager\\test\\controller\\objects\\seriesRelationTests.ts",
          "file": "\\test\\controller\\objects\\seriesRelationTests.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "seriesTest | Relations \"before all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testprovider = new testProvider_1.default(\"Test\");\ntestprovider.hasUniqueIdForSeasons = false;\nprovider_list_1.default['loadedListProvider'] = provider_list_1.default.getListProviderList();\nprovider_list_1.default['loadedListProvider'].push(testprovider);",
              "err": {},
              "uuid": "4c6b00fd-2f3a-4e13-8d61-8698d86f29e4",
              "parentUUID": "98f24de8-e0ad-4a9e-94bc-5981930cf224",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "get all Relations based on prequel id",
              "fullTitle": "seriesTest | Relations get all Relations based on prequel id",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const series1 = getFilledAnime();\nseries1.getListProvidersInfos()[0].id = 1;\nconst series2 = getFilledAnime();\nseries2.getListProvidersInfos()[0].id = 2;\nseries2.getListProvidersInfos()[0].prequelIds.push(1);\nconst series3 = getFilledAnime();\nseries3.getListProvidersInfos()[0].id = 3;\nseries3.getListProvidersInfos()[0].prequelIds.push(2);\nconst series4 = getFilledAnime();\nseries4.getListProvidersInfos()[0].id = 4;\nlet list = [series1, series2, series3, series4];\nlist = await list_helper_1.default.shuffle(list);\nconst result1 = await series1.getAllRelations(list);\nconst result2 = await series2.getAllRelations(list);\nconst result3 = await series3.getAllRelations(list);\nassert_1.default.equal(result1.length, 2);\nassert_1.default.equal(result2.length, 2);\nassert_1.default.equal(result3.length, 2);\nassert_1.default.equal(await list_helper_1.default.isSeriesInList(result1, series1), false);\nassert_1.default.equal(await list_helper_1.default.isSeriesInList(result2, series2), false);\nassert_1.default.equal(await list_helper_1.default.isSeriesInList(result3, series3), false);\nassert_1.default.equal(await list_helper_1.default.isSeriesInList(result1, series4), false);\nassert_1.default.equal(await list_helper_1.default.isSeriesInList(result2, series4), false);\nassert_1.default.equal(await list_helper_1.default.isSeriesInList(result3, series4), false);",
              "err": {},
              "uuid": "c8ae2e49-d6c5-4a86-a6fe-c90167e4ea4e",
              "parentUUID": "98f24de8-e0ad-4a9e-94bc-5981930cf224",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get all Relations based on sequel id",
              "fullTitle": "seriesTest | Relations get all Relations based on sequel id",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const series1 = getFilledAnime();\nseries1.getListProvidersInfos()[0].id = 1;\nseries1.getListProvidersInfos()[0].sequelIds.push(2);\nconst series2 = getFilledAnime();\nseries2.getListProvidersInfos()[0].id = 2;\nseries2.getListProvidersInfos()[0].sequelIds.push(3);\nconst series3 = getFilledAnime();\nseries3.getListProvidersInfos()[0].id = 3;\nconst series4 = getFilledAnime();\nseries4.getListProvidersInfos()[0].id = 4;\nlet list = [series1, series2, series3, series4];\nlist = await list_helper_1.default.shuffle(list);\nconst result1 = await series1.getAllRelations(list);\nconst result2 = await series2.getAllRelations(list);\nconst result3 = await series3.getAllRelations(list);\nassert_1.default.equal(result1.length, 2);\nassert_1.default.equal(result2.length, 2);\nassert_1.default.equal(result3.length, 2);\nassert_1.default.equal(await list_helper_1.default.isSeriesInList(result1, series1), false);\nassert_1.default.equal(await list_helper_1.default.isSeriesInList(result2, series2), false);\nassert_1.default.equal(await list_helper_1.default.isSeriesInList(result3, series3), false);\nassert_1.default.equal(await list_helper_1.default.isSeriesInList(result1, series4), false);\nassert_1.default.equal(await list_helper_1.default.isSeriesInList(result2, series4), false);\nassert_1.default.equal(await list_helper_1.default.isSeriesInList(result3, series4), false);",
              "err": {},
              "uuid": "df2019bb-5939-4fea-ba3a-91b8b849a6e2",
              "parentUUID": "98f24de8-e0ad-4a9e-94bc-5981930cf224",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get all Relations based on sequel id and prequel id",
              "fullTitle": "seriesTest | Relations get all Relations based on sequel id and prequel id",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const series1 = getFilledAnime();\nseries1.getListProvidersInfos()[0].id = 1;\nseries1.getListProvidersInfos()[0].sequelIds.push(2);\nconst series2 = getFilledAnime();\nseries2.getListProvidersInfos()[0].id = 2;\nseries2.getListProvidersInfos()[0].sequelIds.push(3);\nseries2.getListProvidersInfos()[0].prequelIds.push(1);\nconst series3 = getFilledAnime();\nseries3.getListProvidersInfos()[0].id = 3;\nseries2.getListProvidersInfos()[0].prequelIds.push(2);\nconst series4 = getFilledAnime();\nseries4.getListProvidersInfos()[0].id = 4;\nlet list = [series1, series2, series3, series4];\nlist = await list_helper_1.default.shuffle(list);\nconst result1 = await series1.getAllRelations(list);\nconst result2 = await series2.getAllRelations(list);\nconst result3 = await series3.getAllRelations(list);\nassert_1.default.equal(result1.length, 2);\nassert_1.default.equal(result2.length, 2);\nassert_1.default.equal(result3.length, 2);\nassert_1.default.equal(await list_helper_1.default.isSeriesInList(result1, series1), false);\nassert_1.default.equal(await list_helper_1.default.isSeriesInList(result2, series2), false);\nassert_1.default.equal(await list_helper_1.default.isSeriesInList(result3, series3), false);\nassert_1.default.equal(await list_helper_1.default.isSeriesInList(result1, series4), false);\nassert_1.default.equal(await list_helper_1.default.isSeriesInList(result2, series4), false);\nassert_1.default.equal(await list_helper_1.default.isSeriesInList(result3, series4), false);",
              "err": {},
              "uuid": "d45565e2-8238-4448-81a9-111c23016156",
              "parentUUID": "98f24de8-e0ad-4a9e-94bc-5981930cf224",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get all Relations based on provider id",
              "fullTitle": "seriesTest | Relations get all Relations based on provider id",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const series1 = getFilledAnime();\nseries1.getListProvidersInfos()[0].id = 1;\nseries1.getListProvidersInfos()[0].targetSeason = 1;\nconst series2 = getFilledAnime();\nseries2.getListProvidersInfos()[0].id = 1;\nseries2.getListProvidersInfos()[0].targetSeason = 2;\nconst series3 = getFilledAnime();\nseries3.getListProvidersInfos()[0].id = 1;\nseries3.getListProvidersInfos()[0].targetSeason = 3;\nconst series4 = getFilledAnime();\nseries4.getListProvidersInfos()[0].id = 4;\nlet list = [series1, series2, series3, series4];\nlist = await list_helper_1.default.shuffle(list);\nconst result1 = await series1.getAllRelations(list);\nconst result2 = await series2.getAllRelations(list);\nconst result3 = await series3.getAllRelations(list);\nassert_1.default.equal(result1.length, 2);\nassert_1.default.equal(result2.length, 2);\nassert_1.default.equal(result3.length, 2);\nassert_1.default.equal(await list_helper_1.default.isSeriesInList(result1, series1), false);\nassert_1.default.equal(await list_helper_1.default.isSeriesInList(result2, series2), false);\nassert_1.default.equal(await list_helper_1.default.isSeriesInList(result3, series3), false);\nassert_1.default.equal(await list_helper_1.default.isSeriesInList(result1, series4), false);\nassert_1.default.equal(await list_helper_1.default.isSeriesInList(result2, series4), false);\nassert_1.default.equal(await list_helper_1.default.isSeriesInList(result3, series4), false);",
              "err": {},
              "uuid": "2ee32dc7-0389-48e1-8269-7cb9cfba34d4",
              "parentUUID": "98f24de8-e0ad-4a9e-94bc-5981930cf224",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get all Relations based on multi sequels id",
              "fullTitle": "seriesTest | Relations get all Relations based on multi sequels id",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const series1 = getFilledAnime();\nseries1.mediaType = media_type_1.MediaType.SERIES;\nseries1.getListProvidersInfos()[0].id = 1;\nseries1.getListProvidersInfos()[0].sequelIds.push(2);\nseries1.getListProvidersInfos()[0].sequelIds.push(3);\nconst series2 = getFilledAnime();\nseries2.getListProvidersInfos()[0].id = 2;\nseries2.mediaType = media_type_1.MediaType.MOVIE;\nseries2.getListProvidersInfos()[0].sequelIds.push(5);\nconst series3 = getFilledAnime();\nseries3.mediaType = media_type_1.MediaType.SERIES;\nseries3.getListProvidersInfos()[0].id = 3;\nseries3.getListProvidersInfos()[0].sequelIds.push(4);\nseries3.getListProvidersInfos()[0].prequelIds.push(1);\nconst series4 = getFilledAnime();\nseries4.getListProvidersInfos()[0].prequelIds.push(3);\nseries4.getListProvidersInfos()[0].id = 4;\nconst series5 = getFilledAnime();\nseries5.getListProvidersInfos()[0].id = 5;\nseries5.getListProvidersInfos()[0].sequelIds.push(6);\nseries5.getListProvidersInfos()[0].prequelIds.push(2);\nconst series6 = getFilledAnime();\nseries6.getListProvidersInfos()[0].id = 6;\nlet list = [series1, series2, series3, series4, series5, series6];\nlist = await list_helper_1.default.shuffle(list);\nconst result1 = await series1.getAllRelations(list);\nconst result2 = await series3.getAllRelations(list);\nconst result3 = await series4.getAllRelations(list);\nassert_1.default.equal(result1.length, 2, \"Id 1 failed\");\nassert_1.default.equal(result2.length, 2, \"Id 2 failed\");\nassert_1.default.equal(result3.length, 2, \"Id 3 failed\");\nassert_1.default.equal(await list_helper_1.default.isSeriesInList(result1, series1), false);\nassert_1.default.equal(await list_helper_1.default.isSeriesInList(result2, series2), false);\nassert_1.default.equal(await list_helper_1.default.isSeriesInList(result3, series6), false);\nassert_1.default.equal(await list_helper_1.default.isSeriesInList(result1, series2), false);\nassert_1.default.equal(await list_helper_1.default.isSeriesInList(result2, series2), false);\nassert_1.default.equal(await list_helper_1.default.isSeriesInList(result3, series2), false);",
              "err": {},
              "uuid": "c747c9d5-244c-4fc1-817a-97da803c0d90",
              "parentUUID": "98f24de8-e0ad-4a9e-94bc-5981930cf224",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c8ae2e49-d6c5-4a86-a6fe-c90167e4ea4e",
            "df2019bb-5939-4fea-ba3a-91b8b849a6e2",
            "d45565e2-8238-4448-81a9-111c23016156",
            "2ee32dc7-0389-48e1-8269-7cb9cfba34d4",
            "c747c9d5-244c-4fc1-817a-97da803c0d90"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "34ed9a87-012b-436a-a809-e9b113aa28f2",
          "title": "seriesTest | Season",
          "fullFile": "D:\\Desktop\\VueElectron\\list-manager\\test\\controller\\objects\\seriesSeasonTests.ts",
          "file": "\\test\\controller\\objects\\seriesSeasonTests.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return season 1",
              "fullTitle": "seriesTest | Season should return season 1",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const series = new series_1.default();\nconst provider = new list_provider_local_data_1.ListProviderLocalData(\"TestA\");\nprovider.targetSeason = 1;\nseries.addListProvider(provider);\nassert_1.strictEqual(await series.getSeason(), 1);\nreturn;",
              "err": {},
              "uuid": "96633cfd-bd47-4718-9808-34afd2c4cca0",
              "parentUUID": "34ed9a87-012b-436a-a809-e9b113aa28f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return season 2",
              "fullTitle": "seriesTest | Season should return season 2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const series = new series_1.default();\nseries.addSeriesName(new name_1.default('Test 3', 'en'));\nassert_1.strictEqual(await series.getSeason(), 3);\nreturn;",
              "err": {},
              "uuid": "9c2f53a9-f544-4679-8229-9a4acad9f9fb",
              "parentUUID": "34ed9a87-012b-436a-a809-e9b113aa28f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return season 3",
              "fullTitle": "seriesTest | Season should return season 3",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const series = new series_1.default();\nseries.addSeriesName(new name_1.default('Test III', 'en'));\nassert_1.strictEqual(await series.getSeason(), 3);\nreturn;",
              "err": {},
              "uuid": "fa4f7593-88bd-49ea-89bd-a1a35b8da8ec",
              "parentUUID": "34ed9a87-012b-436a-a809-e9b113aa28f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return season 4",
              "fullTitle": "seriesTest | Season should return season 4",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const series = new series_1.default();\nconst lpld = new list_provider_local_data_1.ListProviderLocalData();\nlpld.prequelIds.push(6);\nseries.addListProvider(lpld);\nseries.addSeriesName(new name_1.default('Test III', 'en'));\nassert_1.strictEqual(await series.getSeason([series]), 3);\nreturn;",
              "err": {},
              "uuid": "9f9cb7ae-694e-4844-ba8f-3c68030f6d77",
              "parentUUID": "34ed9a87-012b-436a-a809-e9b113aa28f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return season 5",
              "fullTitle": "seriesTest | Season should return season 5",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const series = new series_1.default();\nconst lpld = new list_provider_local_data_1.ListProviderLocalData();\nlpld.prequelIds.push(6);\nseries.addListProvider(lpld);\nseries.addSeriesName(new name_1.default('Test III', 'en'));\nconst series2 = new series_1.default();\nconst lpld2 = new list_provider_local_data_1.ListProviderLocalData();\nlpld2.prequelIds.push(5);\nlpld2.sequelIds.push(6);\nseries2.addListProvider(lpld);\nseries2.addSeriesName(new name_1.default('Test II', 'en'));\nassert_1.strictEqual(await series.getSeason([series, series2]), 3);\nreturn;",
              "err": {},
              "uuid": "1d2e080d-b0d6-4563-97b7-accb4d003e17",
              "parentUUID": "34ed9a87-012b-436a-a809-e9b113aa28f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return season 6",
              "fullTitle": "seriesTest | Season should return season 6",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const series = new series_1.default();\nconst lpld = new list_provider_local_data_1.ListProviderLocalData();\nlpld.prequelIds.push(6);\nseries.addListProvider(lpld);\nseries.addSeriesName(new name_1.default('Test III', 'en'));\nconst series2 = new series_1.default();\nconst lpld2 = new list_provider_local_data_1.ListProviderLocalData();\nlpld2.prequelIds.push(5);\nlpld2.sequelIds.push(6);\nseries2.addListProvider(lpld);\nseries2.addSeriesName(new name_1.default('Test II', 'en'));\nassert_1.strictEqual(await series2.getSeason([series, series2]), 2);\nreturn;",
              "err": {},
              "uuid": "f5afed81-94b3-4d00-98e4-482f33177a55",
              "parentUUID": "34ed9a87-012b-436a-a809-e9b113aa28f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return season 7",
              "fullTitle": "seriesTest | Season should return season 7",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const series = new series_1.default();\nconst lpld = new list_provider_local_data_1.ListProviderLocalData(\"Test\");\nlpld.prequelIds.push(5);\nlpld.id = 6;\nseries.addListProvider(lpld);\nseries.addSeriesName(new name_1.default('Test Cool', 'en'));\nconst series2 = new series_1.default();\nconst lpld2 = new list_provider_local_data_1.ListProviderLocalData(\"Test\");\nlpld2.sequelIds.push(6);\nlpld2.id = 5;\nseries2.addListProvider(lpld);\nseries2.addSeriesName(new name_1.default('Test Test', 'en'));\nassert_1.strictEqual(await series.getSeason([series, series2]), 2);\nassert_1.strictEqual(await series2.getSeason([series, series2]), 1);\nreturn;",
              "err": {
                "message": "AssertionError: Expected values to be strictly equal:\n\nundefined !== 2\n",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n\nundefined !== 2\n\n    at Context.<anonymous> (test\\controller\\objects\\seriesSeasonTests.ts:78:9)",
                "diff": null
              },
              "uuid": "ec7ad4f9-c369-48b0-9305-d730e516fff2",
              "parentUUID": "34ed9a87-012b-436a-a809-e9b113aa28f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return season 8",
              "fullTitle": "seriesTest | Season should return season 8",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const series = new series_1.default();\nconst lpld = new list_provider_local_data_1.ListProviderLocalData();\nlpld.sequelIds.push(6);\nlpld.id = 5;\nseries.addListProvider(lpld);\nseries.addSeriesName(new name_1.default('Test Cool', 'en'));\nconst series2 = new series_1.default();\nconst lpld2 = new list_provider_local_data_1.ListProviderLocalData();\nlpld2.sequelIds.push(7);\nlpld2.prequelIds.push(5);\nlpld2.id = 6;\nseries2.addListProvider(lpld);\nseries2.addSeriesName(new name_1.default('Test Test', 'en'));\nconst series3 = new series_1.default();\nconst lpld3 = new list_provider_local_data_1.ListProviderLocalData();\nlpld3.prequelIds.push(6);\nlpld3.id = 7;\nseries3.addListProvider(lpld);\nseries3.addSeriesName(new name_1.default('Test Testooo', 'en'));\nassert_1.strictEqual(await series.getSeason([series, series2, series3]), 1);\nassert_1.strictEqual(await series2.getSeason([series, series2, series3]), 2);\nassert_1.strictEqual(await series3.getSeason([series, series2, series3]), 3);\nreturn;",
              "err": {
                "message": "AssertionError: Expected values to be strictly equal:\n\nundefined !== 1\n",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n\nundefined !== 1\n\n    at Context.<anonymous> (test\\controller\\objects\\seriesSeasonTests.ts:102:9)",
                "diff": null
              },
              "uuid": "e0d6e85b-198f-474d-99a6-d667a41f53b2",
              "parentUUID": "34ed9a87-012b-436a-a809-e9b113aa28f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return season 9",
              "fullTitle": "seriesTest | Season should return season 9",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const series = new series_1.default();\nseries.addSeriesName(new name_1.default('Test S3 part 2', 'en'));\nassert_1.strictEqual(await series.getSeason(), undefined);\nreturn;",
              "err": {
                "message": "AssertionError: Expected values to be strictly equal:\n\n2 !== undefined\n",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n\n2 !== undefined\n\n    at Context.<anonymous> (test\\controller\\objects\\seriesSeasonTests.ts:110:9)",
                "diff": null
              },
              "uuid": "4395c145-ea3c-4c3a-8a9d-e67f702d5162",
              "parentUUID": "34ed9a87-012b-436a-a809-e9b113aa28f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not return season (1/2)",
              "fullTitle": "seriesTest | Season should not return season (1/2)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const series = new series_1.default();\nseries.addSeriesName(new name_1.default('test-2017-127567', 'slug'));\nassert_1.strictEqual(await series.getSeason(), undefined);\nreturn;",
              "err": {},
              "uuid": "2d52f2ec-b3ea-4596-801d-450053fd3518",
              "parentUUID": "34ed9a87-012b-436a-a809-e9b113aa28f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not return season (2/2)",
              "fullTitle": "seriesTest | Season should not return season (2/2)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const series = new series_1.default();\nseries.addSeriesName(new name_1.default('test-test-2013', 'slug'));\nassert_1.strictEqual(await series.getSeason(), undefined);\nreturn;",
              "err": {},
              "uuid": "db6c595c-28ce-4e63-a953-944e324e9e10",
              "parentUUID": "34ed9a87-012b-436a-a809-e9b113aa28f2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "96633cfd-bd47-4718-9808-34afd2c4cca0",
            "9c2f53a9-f544-4679-8229-9a4acad9f9fb",
            "fa4f7593-88bd-49ea-89bd-a1a35b8da8ec",
            "9f9cb7ae-694e-4844-ba8f-3c68030f6d77",
            "1d2e080d-b0d6-4563-97b7-accb4d003e17",
            "f5afed81-94b3-4d00-98e4-482f33177a55",
            "2d52f2ec-b3ea-4596-801d-450053fd3518",
            "db6c595c-28ce-4e63-a953-944e324e9e10"
          ],
          "failures": [
            "ec7ad4f9-c369-48b0-9305-d730e516fff2",
            "e0d6e85b-198f-474d-99a6-d667a41f53b2",
            "4395c145-ea3c-4c3a-8a9d-e67f702d5162"
          ],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "dff5e127-f12e-4d0b-805e-d5839f81e01c",
          "title": "seriesTest | Sync",
          "fullFile": "D:\\Desktop\\VueElectron\\list-manager\\test\\controller\\objects\\seriesSnycTests.ts",
          "file": "\\test\\controller\\objects\\seriesSnycTests.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "can sync (1/3)",
              "fullTitle": "seriesTest | Sync can sync (1/3)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const anime = new series_1.default();\nprovider_list_1.default.getListProviderList().push(new testProvider_1.default(\"CanSync121\"));\nconst providerA = new list_provider_local_data_1.ListProviderLocalData(\"CanSync121\");\nproviderA.episodes = 12;\nfor (let index = 0; index < 12; index++) {\n    providerA.addOneEpisode(index);\n}\nproviderA.watchStatus = series_1.WatchStatus.CURRENT;\nprovider_list_1.default.getListProviderList().push(new testProvider_1.default(\"CanSync122\"));\nconst providerB = new list_provider_local_data_1.ListProviderLocalData(\"CanSync122\");\nproviderB.episodes = 24;\nfor (let index = 0; index < 24; index++) {\n    providerB.addOneEpisode(index);\n}\nproviderB.watchStatus = series_1.WatchStatus.COMPLETED;\nanime.episodes = 24;\nanime.addListProvider(providerA, providerB);\nassert_1.default.equal(await anime.getCanSync(), true);",
              "err": {},
              "uuid": "c7d30c4f-9180-4935-94b9-7589fd65c137",
              "parentUUID": "dff5e127-f12e-4d0b-805e-d5839f81e01c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can sync (2/3)",
              "fullTitle": "seriesTest | Sync can sync (2/3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const anime = new series_1.default();\nprovider_list_1.default.getListProviderList().push(new testProvider_1.default(\"CanSync21\"));\nconst providerA = new list_provider_local_data_1.ListProviderLocalData(\"CanSync21\");\nproviderA.episodes = 24;\nfor (let index = 1; index < 25; index++) {\n    providerA.addOneEpisode(index);\n}\nproviderA.watchStatus = series_1.WatchStatus.COMPLETED;\nprovider_list_1.default.getListProviderList().push(new testProvider_1.default(\"CanSync22\"));\nconst providerB = new list_provider_local_data_1.ListProviderLocalData(\"CanSync22\");\nproviderB.episodes = 24;\nanime.episodes = 24;\nanime.addListProvider(providerA, providerB);\nassert_1.default.equal(await anime.getCanSync(), true);",
              "err": {},
              "uuid": "dd325a77-11b9-4165-89b3-0908462a11d9",
              "parentUUID": "dff5e127-f12e-4d0b-805e-d5839f81e01c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can sync (3/3)",
              "fullTitle": "seriesTest | Sync can sync (3/3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const anime = new series_1.default();\nprovider_list_1.default.getListProviderList().push(new testProvider_1.default(\"CanSync31\"));\nconst providerA = new list_provider_local_data_1.ListProviderLocalData(\"CanSync31\");\nproviderA.episodes = 24;\nfor (let index = 1; index < 12; index++) {\n    providerA.addOneEpisode(index);\n}\nproviderA.watchStatus = series_1.WatchStatus.COMPLETED;\nprovider_list_1.default.getListProviderList().push(new testProvider_1.default(\"CanSync32\"));\nconst providerB = new list_provider_local_data_1.ListProviderLocalData(\"CanSync32\");\nproviderB.episodes = 24;\nanime.episodes = 24;\nanime.addListProvider(providerA, providerB);\nassert_1.default.equal(await anime.getCanSync(), true);",
              "err": {},
              "uuid": "85254c24-a7e2-48c2-bf6f-c9facffabdc2",
              "parentUUID": "dff5e127-f12e-4d0b-805e-d5839f81e01c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cant sync (1/7)",
              "fullTitle": "seriesTest | Sync cant sync (1/7)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const anime = new series_1.default();\nprovider_list_1.default.getListProviderList().push(new testProvider_1.default(\"A\"));\nconst providerA = new list_provider_local_data_1.ListProviderLocalData(\"A\");\nproviderA.episodes = 24;\nfor (let index = 0; index < 25; index++) {\n    providerA.addOneEpisode(index);\n}\nproviderA.watchStatus = series_1.WatchStatus.CURRENT;\nprovider_list_1.default.getListProviderList().push(new testProvider_1.default(\"B\"));\nconst providerB = new list_provider_local_data_1.ListProviderLocalData(\"B\");\nproviderB.episodes = 12;\nfor (let index = 0; index < 13; index++) {\n    providerB.addOneEpisode(index);\n}\nproviderB.addOneEpisode(1);\nproviderB.watchStatus = series_1.WatchStatus.COMPLETED;\nanime.episodes = 24;\nanime.addListProvider(providerA, providerB);\nassert_1.default.equal(await anime.getCanSync(), false);",
              "err": {},
              "uuid": "d5eb4a8f-94cf-4fbf-84d9-848224bf7475",
              "parentUUID": "dff5e127-f12e-4d0b-805e-d5839f81e01c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cant sync (2/7)",
              "fullTitle": "seriesTest | Sync cant sync (2/7)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const anime = new series_1.default();\nprovider_list_1.default.getListProviderList().push(new testProvider_1.default(\"G\"));\nconst providerA = new list_provider_local_data_1.ListProviderLocalData(\"G\");\nproviderA.episodes = 12;\nfor (let index = 0; index < 13; index++) {\n    providerA.addOneEpisode(index);\n}\nproviderA.watchStatus = series_1.WatchStatus.COMPLETED;\nprovider_list_1.default.getListProviderList().push(new testProvider_1.default(\"C\"));\nconst providerB = new list_provider_local_data_1.ListProviderLocalData(\"C\");\nproviderB.episodes = 12;\nfor (let index = 0; index < 13; index++) {\n    providerB.addOneEpisode(index);\n}\nproviderB.addOneEpisode(1);\nproviderB.watchStatus = series_1.WatchStatus.COMPLETED;\nanime.episodes = 24;\nanime.addListProvider(providerA, providerB);\nassert_1.default.equal(await anime.getCanSync(), false);",
              "err": {},
              "uuid": "246e6e65-8c52-480f-90d3-d2f696d721e3",
              "parentUUID": "dff5e127-f12e-4d0b-805e-d5839f81e01c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cant sync (3/7)",
              "fullTitle": "seriesTest | Sync cant sync (3/7)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const anime = new series_1.default();\nprovider_list_1.default.getListProviderList().push(new testProvider_1.default(\"E\"));\nconst providerA = new list_provider_local_data_1.ListProviderLocalData(\"E\");\nproviderA.episodes = 12;\nfor (let index = 0; index < 12; index++) {\n    providerA.addOneEpisode(index);\n}\nproviderA.watchStatus = series_1.WatchStatus.CURRENT;\nprovider_list_1.default.getListProviderList().push(new testProvider_1.default(\"F\", false));\nconst providerB = new list_provider_local_data_1.ListProviderLocalData(\"F\");\nproviderB.episodes = 24;\nfor (let index = 0; index < 24; index++) {\n    providerB.addOneEpisode(index);\n}\nproviderB.watchStatus = series_1.WatchStatus.COMPLETED;\nanime.episodes = 24;\nanime.addListProvider(providerA, providerB);\nassert_1.default.equal(await anime.getCanSync(), false);",
              "err": {},
              "uuid": "5a7a9e0d-fead-48dc-9edf-5071baac1007",
              "parentUUID": "dff5e127-f12e-4d0b-805e-d5839f81e01c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cant sync (4/7)",
              "fullTitle": "seriesTest | Sync cant sync (4/7)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const anime = new series_1.default();\nprovider_list_1.default.getListProviderList().push(new testProvider_1.default(\"A\"));\nconst providerA = new list_provider_local_data_1.ListProviderLocalData(\"A\");\nproviderA.episodes = 12;\nfor (let index = 0; index < 12; index++) {\n    providerA.addOneEpisode(index);\n}\nproviderA.watchStatus = series_1.WatchStatus.CURRENT;\nanime.episodes = 24;\nanime.addListProvider(providerA);\nassert_1.default.equal(await anime.getCanSync(), false);",
              "err": {},
              "uuid": "2a224e1c-2cc3-465a-92ff-0b3bdfc23dd3",
              "parentUUID": "dff5e127-f12e-4d0b-805e-d5839f81e01c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cant sync (5/7)",
              "fullTitle": "seriesTest | Sync cant sync (5/7)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const anime = new series_1.default();\nprovider_list_1.default.getListProviderList().push(new testProvider_1.default(\"UU\"));\nconst providerA = new list_provider_local_data_1.ListProviderLocalData(\"UU\");\nproviderA.episodes = 12;\nproviderA.lastUpdate = new Date(100);\nfor (let index = 1; index < 13; index++) {\n    providerA.addOneEpisode(index);\n}\nproviderA.watchStatus = series_1.WatchStatus.CURRENT;\nprovider_list_1.default.getListProviderList().push(new testProvider_1.default(\"JJ\"));\nconst providerB = new list_provider_local_data_1.ListProviderLocalData(\"JJ\");\nproviderB.lastUpdate = new Date(50);\nfor (let index = 1; index < 5; index++) {\n    providerB.addOneEpisode(index);\n}\nproviderB.watchStatus = series_1.WatchStatus.COMPLETED;\nanime.episodes = 24;\nanime.addListProvider(providerA, providerB);\nassert_1.default.equal(await anime.getCanSync(), false);",
              "err": {},
              "uuid": "e3a63c3e-df6b-4390-b88d-5bea338fc279",
              "parentUUID": "dff5e127-f12e-4d0b-805e-d5839f81e01c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cant sync (6/7)",
              "fullTitle": "seriesTest | Sync cant sync (6/7)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const anime = new series_1.default();\nprovider_list_1.default.getListProviderList().push(new testProvider_1.default(\"T\"));\nconst providerA = new list_provider_local_data_1.ListProviderLocalData(\"T\");\nproviderA.lastUpdate = new Date(0);\nfor (let index = 0; index < 12; index++) {\n    providerA.addOneEpisode(index);\n}\nproviderA.watchStatus = series_1.WatchStatus.CURRENT;\nprovider_list_1.default.getListProviderList().push(new testProvider_1.default(\"O\"));\nconst providerB = new list_provider_local_data_1.ListProviderLocalData(\"O\");\nproviderB.episodes = 24;\nfor (let index = 1; index < 25; index++) {\n    providerB.addOneEpisode(index);\n}\nprovider_list_1.default.getListProviderList().push(new testProvider_1.default(\"M\"));\nconst providerC = new list_provider_local_data_1.ListProviderLocalData(\"M\");\nproviderC.episodes = 24;\nfor (let index = 1; index < 25; index++) {\n    providerC.addOneEpisode(index);\n}\nproviderC.watchStatus = series_1.WatchStatus.COMPLETED;\nanime.episodes = 24;\nanime.addListProvider(providerA, providerB, providerC);\nassert_1.default.equal(await anime.getCanSync(), false);",
              "err": {},
              "uuid": "ce3e71d8-d61b-416b-a034-fdda060bbca4",
              "parentUUID": "dff5e127-f12e-4d0b-805e-d5839f81e01c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cant sync (7/7)",
              "fullTitle": "seriesTest | Sync cant sync (7/7)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const anime = new series_1.default();\nprovider_list_1.default.getListProviderList().push(new testProvider_1.default(\"TestProvider1\"));\nconst providerA = new list_provider_local_data_1.ListProviderLocalData(\"TestProvider1\");\nproviderA.lastUpdate = new Date(\"2019-07-24T19:09:37.373Z\");\nproviderA.episodes = 12;\nfor (let index = 1; index < 13; index++) {\n    providerA.addOneEpisode(index);\n}\nproviderA.watchStatus = series_1.WatchStatus.CURRENT;\nprovider_list_1.default.getListProviderList().push(new testProvider_1.default(\"TestProvider2\"));\nconst providerB = new list_provider_local_data_1.ListProviderLocalData(\"TestProvider2\");\nproviderB.lastUpdate = new Date(\"2019-07-24T19:09:37.759Z\");\nfor (let index = 1; index < 13; index++) {\n    providerB.addOneEpisode(index);\n}\nanime.addListProvider(providerA, providerB);\nassert_1.default.equal(await anime.getCanSync(), false);",
              "err": {},
              "uuid": "56626db6-bd30-47d2-9dba-8d2aea20a285",
              "parentUUID": "dff5e127-f12e-4d0b-805e-d5839f81e01c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c7d30c4f-9180-4935-94b9-7589fd65c137",
            "dd325a77-11b9-4165-89b3-0908462a11d9",
            "85254c24-a7e2-48c2-bf6f-c9facffabdc2",
            "d5eb4a8f-94cf-4fbf-84d9-848224bf7475",
            "246e6e65-8c52-480f-90d3-d2f696d721e3",
            "5a7a9e0d-fead-48dc-9edf-5071baac1007",
            "2a224e1c-2cc3-465a-92ff-0b3bdfc23dd3",
            "e3a63c3e-df6b-4390-b88d-5bea338fc279",
            "ce3e71d8-d61b-416b-a034-fdda060bbca4",
            "56626db6-bd30-47d2-9dba-8d2aea20a285"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "aa46681e-d396-4cb1-9d92-4518040b3e2b",
          "title": "series basic tests",
          "fullFile": "D:\\Desktop\\VueElectron\\list-manager\\test\\controller\\objects\\seriesTest.ts",
          "file": "\\test\\controller\\objects\\seriesTest.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should have a id",
              "fullTitle": "series basic tests should have a id",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const series = new series_1.default();\nassert.notEqual(series.id.length, 0);\nreturn;",
              "err": {},
              "uuid": "b11d69ca-8c02-46df-81e4-174fd11e3260",
              "parentUUID": "aa46681e-d396-4cb1-9d92-4518040b3e2b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return last provider",
              "fullTitle": "series basic tests should return last provider",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const series = new series_1.default();\nconst providerA = new list_provider_local_data_1.ListProviderLocalData();\nproviderA.lastUpdate = new Date(100);\nproviderA.watchProgress = [];\nconst providerB = new list_provider_local_data_1.ListProviderLocalData();\nproviderB.watchProgress = [];\nproviderB.lastUpdate = new Date(50);\nseries.addListProvider(providerA, providerB);\nassert.equal(await series['getLastUpdatedProvider'](), providerA);\nreturn;",
              "err": {},
              "uuid": "0b4f283f-ac7e-4b43-8df7-5f7dc840764e",
              "parentUUID": "aa46681e-d396-4cb1-9d92-4518040b3e2b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return last watchprogress",
              "fullTitle": "series basic tests should return last watchprogress",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const series = new series_1.default();\nconst providerA = new list_provider_local_data_1.ListProviderLocalData();\nproviderA.lastUpdate = new Date(2);\nproviderA.addOneEpisode(5);\nconst providerB = new list_provider_local_data_1.ListProviderLocalData();\nproviderB.lastUpdate = new Date(1);\nproviderB.addOneEpisode(4);\nseries.addListProvider(providerA, providerB);\nconst result = await series.getLastWatchProgress();\nif (typeof result != 'undefined') {\n    assert.equal(result.episode, 5);\n}\nassert.notEqual(typeof result, 'undefined');\nreturn;",
              "err": {},
              "uuid": "51056e52-0595-4d43-a2bf-8e2cf2cb6f33",
              "parentUUID": "aa46681e-d396-4cb1-9d92-4518040b3e2b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should all episodes (1/3)",
              "fullTitle": "series basic tests should all episodes (1/3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const series = new series_1.default();\nconst providerA = new list_provider_local_data_1.ListProviderLocalData(\"TestA\");\nproviderA.episodes = 10;\nconst providerB = new list_provider_local_data_1.ListProviderLocalData(\"TestB\");\nproviderB.episodes = 11;\nseries.addListProvider(providerA, providerB);\nconst allEpisodes = await series.getAllEpisodes();\nassert.deepStrictEqual(allEpisodes, [10, 11]);\nreturn;",
              "err": {},
              "uuid": "bdc863e2-3381-43db-817f-f083e0d488de",
              "parentUUID": "aa46681e-d396-4cb1-9d92-4518040b3e2b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should all episodes (2/3)",
              "fullTitle": "series basic tests should all episodes (2/3)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const series = new series_1.default();\nconst providerA = new list_provider_local_data_1.ListProviderLocalData();\nproviderA.episodes = 10;\nconst providerB = new list_provider_local_data_1.ListProviderLocalData();\nseries.episodes = 11;\nseries.addListProvider(providerA, providerB);\nassert.deepStrictEqual(await series.getAllEpisodes(), [10, 11]);\nreturn;",
              "err": {},
              "uuid": "916219d2-40c0-4b43-855c-eb5058acfe67",
              "parentUUID": "aa46681e-d396-4cb1-9d92-4518040b3e2b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should all episodes (3/3)",
              "fullTitle": "series basic tests should all episodes (3/3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const series = new series_1.default();\nconst providerA = new list_provider_local_data_1.ListProviderLocalData();\nseries.addListProvider(providerA);\nassert.deepStrictEqual(await series.getAllEpisodes(), []);\nreturn;",
              "err": {},
              "uuid": "98fbbb34-e97a-44f0-aceb-6fe896cfc197",
              "parentUUID": "aa46681e-d396-4cb1-9d92-4518040b3e2b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should max episode (1/3)",
              "fullTitle": "series basic tests should max episode (1/3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const series = new series_1.default();\nconst providerA = new list_provider_local_data_1.ListProviderLocalData(\"TestA\");\nproviderA.episodes = 12;\nconst providerB = new list_provider_local_data_1.ListProviderLocalData(\"TestB\");\nseries.episodes = 11;\nseries.addListProvider(providerA, providerB);\nassert.equal(series.getMaxEpisode(), 12);\nreturn;",
              "err": {},
              "uuid": "185a39ae-fdfc-4712-96ae-9ce2ca3996d9",
              "parentUUID": "aa46681e-d396-4cb1-9d92-4518040b3e2b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should max episode (2/3)",
              "fullTitle": "series basic tests should max episode (2/3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const series = new series_1.default();\nconst providerA = new list_provider_local_data_1.ListProviderLocalData(\"TestA\");\nproviderA.episodes = 12;\nconst providerB = new list_provider_local_data_1.ListProviderLocalData(\"TestB\");\nproviderB.episodes = 24;\nseries.episodes = 11;\nseries.addListProvider(providerA, providerB);\nassert.strictEqual(series.getMaxEpisode(), 24);\nreturn;",
              "err": {},
              "uuid": "45b60f73-cc1b-4635-8d8b-a000f97da472",
              "parentUUID": "aa46681e-d396-4cb1-9d92-4518040b3e2b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should max episode (3/3)",
              "fullTitle": "series basic tests should max episode (3/3)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const series = new series_1.default();\nconst providerA = new list_provider_local_data_1.ListProviderLocalData();\nproviderA.episodes = 12;\nconst providerB = new list_provider_local_data_1.ListProviderLocalData();\nproviderB.episodes = 24;\nseries.episodes = 11;\nseries.addListProvider(providerA, providerB);\nassert.throws(series.getMaxEpisode);\nreturn;",
              "err": {},
              "uuid": "5cde2918-40b7-49c9-95a5-0ccb1642cef0",
              "parentUUID": "aa46681e-d396-4cb1-9d92-4518040b3e2b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should prevent duplicates in names",
              "fullTitle": "series basic tests should prevent duplicates in names",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const series = new series_1.default();\nseries.addSeriesName(new name_1.default('Test', 'eng'));\nseries.addSeriesName(new name_1.default('Test', 'eng'));\nassert.strictEqual((await series.getAllNames()).length, 1);",
              "err": {},
              "uuid": "da493b89-bbc3-4822-8049-c02ba0b3ffa6",
              "parentUUID": "aa46681e-d396-4cb1-9d92-4518040b3e2b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should prevent null entrys in names",
              "fullTitle": "series basic tests should prevent null entrys in names",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const series = new series_1.default();\nseries.addSeriesName(null);\nassert.strictEqual((await series.getAllNames()).length, 0);",
              "err": {},
              "uuid": "5c4bb132-10ba-4b8a-a98a-75134864b5ae",
              "parentUUID": "aa46681e-d396-4cb1-9d92-4518040b3e2b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should prevent undefined entrys in names",
              "fullTitle": "series basic tests should prevent undefined entrys in names",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const series = new series_1.default();\nseries.addSeriesName(undefined);\nassert.strictEqual((await series.getAllNames()).length, 0);",
              "err": {},
              "uuid": "be7ef636-0732-4856-b9f6-ebd84eddf502",
              "parentUUID": "aa46681e-d396-4cb1-9d92-4518040b3e2b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b11d69ca-8c02-46df-81e4-174fd11e3260",
            "0b4f283f-ac7e-4b43-8df7-5f7dc840764e",
            "51056e52-0595-4d43-a2bf-8e2cf2cb6f33",
            "bdc863e2-3381-43db-817f-f083e0d488de",
            "916219d2-40c0-4b43-855c-eb5058acfe67",
            "98fbbb34-e97a-44f0-aceb-6fe896cfc197",
            "185a39ae-fdfc-4712-96ae-9ce2ca3996d9",
            "45b60f73-cc1b-4635-8d8b-a000f97da472",
            "5cde2918-40b7-49c9-95a5-0ccb1642cef0",
            "da493b89-bbc3-4822-8049-c02ba0b3ffa6",
            "5c4bb132-10ba-4b8a-a98a-75134864b5ae",
            "be7ef636-0732-4856-b9f6-ebd84eddf502"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "35457a07-c0ca-4f2d-a5dc-0e3db35ebee4",
          "title": "listHelperTest",
          "fullFile": "D:\\Desktop\\VueElectron\\list-manager\\test\\helperTest\\listHelperTest.ts",
          "file": "\\test\\helperTest\\listHelperTest.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should clean array",
              "fullTitle": "listHelperTest should clean array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var arr = await list_helper_1.default.cleanArray([null, undefined, '']);\nassert.equal(arr.length, 0);\nreturn;",
              "err": {},
              "uuid": "1b3fee0e-803b-4435-a055-04a968f0f111",
              "parentUUID": "35457a07-c0ca-4f2d-a5dc-0e3db35ebee4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get most frequency occur (1/2)",
              "fullTitle": "listHelperTest should get most frequency occur (1/2)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var arr = await list_helper_1.default.findMostFrequent([1, 1, 0, 1, 1, 0]);\nassert.equal(arr, 1);\nreturn;",
              "err": {},
              "uuid": "2d6f424d-19d3-4c48-9b6e-76bd7c4b56f6",
              "parentUUID": "35457a07-c0ca-4f2d-a5dc-0e3db35ebee4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get most frequency occur (2/2)",
              "fullTitle": "listHelperTest should get most frequency occur (2/2)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var arr = await list_helper_1.default.findMostFrequent(await list_helper_1.default.cleanArray([1]));\nassert.equal(arr, 1);\nreturn;",
              "err": {},
              "uuid": "ee055778-b6a6-4c1b-aab1-aa68433d9b04",
              "parentUUID": "35457a07-c0ca-4f2d-a5dc-0e3db35ebee4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return undefined",
              "fullTitle": "listHelperTest should return undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var arr = await list_helper_1.default.findMostFrequent([]);\nassert.equal(typeof arr, 'undefined');\nreturn;",
              "err": {},
              "uuid": "6e3a6d0f-89a1-459f-8f51-0297320eeb06",
              "parentUUID": "35457a07-c0ca-4f2d-a5dc-0e3db35ebee4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should find entry existing in list",
              "fullTitle": "listHelperTest should find entry existing in list",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const entry1 = new series_1.default();\nentry1.id = '1';\nconst entry2 = new series_1.default();\nentry2.id = '2';\nconst entry3 = new series_1.default();\nentry3.id = '3';\nconst list = [entry1, entry2, entry3];\nconst result = await list_helper_1.default.isSeriesInList(list, entry2);\nassert.equal(result, true);",
              "err": {},
              "uuid": "83199b14-b5cd-4b8f-9684-ed4e53ce3370",
              "parentUUID": "35457a07-c0ca-4f2d-a5dc-0e3db35ebee4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shouldnt find any entry",
              "fullTitle": "listHelperTest shouldnt find any entry",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const entry1 = new series_1.default();\nentry1.id = '1';\nconst entry2 = new series_1.default();\nentry2.id = '2';\nconst entry3 = new series_1.default();\nentry3.id = '3';\nconst list = [entry1, entry3];\nconst result = await list_helper_1.default.isSeriesInList(list, entry2);\nassert.equal(result, false);",
              "err": {},
              "uuid": "e37c6010-df53-4ed1-aba5-7fabe163615b",
              "parentUUID": "35457a07-c0ca-4f2d-a5dc-0e3db35ebee4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "it should look if item is in list",
              "fullTitle": "listHelperTest it should look if item is in list",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = [\"Test\", \"Test2\", \"Test3\"];\nassert.strictEqual(await list_helper_1.default.isItemInList(array, \"Test\"), true);\nassert.strictEqual(await list_helper_1.default.isItemInList(array, \"xTestx\"), false);",
              "err": {},
              "uuid": "ff6af003-0615-43bc-8222-f08ea3054aec",
              "parentUUID": "35457a07-c0ca-4f2d-a5dc-0e3db35ebee4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check list type",
              "fullTitle": "listHelperTest should check list type",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const numberList = [1, 2, 3];\nconst watchprogressList = [new watch_progress_1.default(1), new watch_progress_1.default(2), new watch_progress_1.default(3)];\nassert.strictEqual(await list_helper_1.default.checkType(numberList, Number), true, \"numberList is type of number\");\nassert.strictEqual(await list_helper_1.default.checkType(watchprogressList, watch_progress_1.default), true, \"watchprogressList is type of WatchProgress\");\nassert.strictEqual(await list_helper_1.default.checkType(numberList, watch_progress_1.default), false, \"numberList is not type of WatchProgress\");\nassert.strictEqual(await list_helper_1.default.checkType(watchprogressList, Number), false, \"watchprogressList is not type of Number\");",
              "err": {
                "message": "AssertionError: numberList is not type of WatchProgress",
                "estack": "AssertionError [ERR_ASSERTION]: numberList is not type of WatchProgress\n    at Context.<anonymous> (test\\helperTest\\listHelperTest.ts:58:16)",
                "diff": "- true\n+ false\n"
              },
              "uuid": "5e06665a-aaaa-42bf-9080-0331f5e6efd6",
              "parentUUID": "35457a07-c0ca-4f2d-a5dc-0e3db35ebee4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1b3fee0e-803b-4435-a055-04a968f0f111",
            "2d6f424d-19d3-4c48-9b6e-76bd7c4b56f6",
            "ee055778-b6a6-4c1b-aab1-aa68433d9b04",
            "6e3a6d0f-89a1-459f-8f51-0297320eeb06",
            "83199b14-b5cd-4b8f-9684-ed4e53ce3370",
            "e37c6010-df53-4ed1-aba5-7fabe163615b",
            "ff6af003-0615-43bc-8222-f08ea3054aec"
          ],
          "failures": [
            "5e06665a-aaaa-42bf-9080-0331f5e6efd6"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d2206e32-3e2e-484b-94d6-fd7f13a7957a",
          "title": "stringHelperTest",
          "fullFile": "D:\\Desktop\\VueElectron\\list-manager\\test\\helperTest\\stringHelperTest.ts",
          "file": "\\test\\helperTest\\stringHelperTest.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should generate a randome string",
              "fullTitle": "stringHelperTest should generate a randome string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.notEqual(string_helper_1.default.randomString(), 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789');\nassert.notEqual(string_helper_1.default.randomString(), '');\nassert.notEqual(typeof string_helper_1.default.randomString(), 'undefined');\nassert.notEqual(string_helper_1.default.randomString(), null);\nreturn;",
              "err": {},
              "uuid": "14b9504b-b1f0-4e1e-b33e-ea7c50a2c65d",
              "parentUUID": "d2206e32-3e2e-484b-94d6-fd7f13a7957a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should clean string",
              "fullTitle": "stringHelperTest should clean string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.strictEqual(await string_helper_1.default.cleanString(\"Test.\"), \"Test\");\nassert.strictEqual(await string_helper_1.default.cleanString(\"Title -test-\"), \"Title test\");\nassert.strictEqual(await string_helper_1.default.cleanString(\"Title-test\"), \"Title test\");\nassert.strictEqual(await string_helper_1.default.cleanString(\"Title 'test'\"), \"Title test\");\nassert.strictEqual(await string_helper_1.default.cleanString(\"Title!\"), \"Title\");\nassert.strictEqual(await string_helper_1.default.cleanString(\"Title!!\"), \"Title!!\");\nassert.strictEqual(await string_helper_1.default.cleanString(\"Title: test\"), \"Title test\");\nassert.strictEqual(await string_helper_1.default.cleanString(\"Title  test\"), \"Title test\");\nreturn;",
              "err": {},
              "uuid": "9e8fd86b-9f4a-4744-a8d8-e431c99a95f5",
              "parentUUID": "d2206e32-3e2e-484b-94d6-fd7f13a7957a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not crash on check kanij",
              "fullTitle": "stringHelperTest should not crash on check kanij",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.strictEqual(await string_helper_1.default.hasKanji(null), false);",
              "err": {},
              "uuid": "5bf82637-78b3-4334-b24f-bf2f9a927cf6",
              "parentUUID": "d2206e32-3e2e-484b-94d6-fd7f13a7957a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should detect cryillic",
              "fullTitle": "stringHelperTest should detect cryillic",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.strictEqual(await string_helper_1.default.hasCyrillic('Привіт'), true);\nreturn;",
              "err": {},
              "uuid": "9b677cb5-df90-4bfa-9e06-1f5d8e267288",
              "parentUUID": "d2206e32-3e2e-484b-94d6-fd7f13a7957a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not detect cryillic",
              "fullTitle": "stringHelperTest should not detect cryillic",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.strictEqual(await string_helper_1.default.hasCyrillic('Hello'), false);\nreturn;",
              "err": {},
              "uuid": "67b2821a-c22c-48f2-8b9f-646da0e5e7b5",
              "parentUUID": "d2206e32-3e2e-484b-94d6-fd7f13a7957a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should detect hangul letters",
              "fullTitle": "stringHelperTest should detect hangul letters",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.strictEqual(await string_helper_1.default.hasHangul('안녕'), true);\nreturn;",
              "err": {},
              "uuid": "81a11ec5-d970-4cb5-abf6-4dd08e4a74d8",
              "parentUUID": "d2206e32-3e2e-484b-94d6-fd7f13a7957a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not detect hangul letters",
              "fullTitle": "stringHelperTest should not detect hangul letters",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.strictEqual(await string_helper_1.default.hasHangul('Hello'), false);\nreturn;",
              "err": {},
              "uuid": "6f457100-060f-46a7-99b7-97454882a487",
              "parentUUID": "d2206e32-3e2e-484b-94d6-fd7f13a7957a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should make test to tset",
              "fullTitle": "stringHelperTest should make test to tset",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await string_helper_1.default.reverseString('test');\nassert.equal(result, 'tset');\nreturn;",
              "err": {},
              "uuid": "a996d37a-009e-41aa-8441-181c42c4d654",
              "parentUUID": "d2206e32-3e2e-484b-94d6-fd7f13a7957a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "14b9504b-b1f0-4e1e-b33e-ea7c50a2c65d",
            "9e8fd86b-9f4a-4744-a8d8-e431c99a95f5",
            "5bf82637-78b3-4334-b24f-bf2f9a927cf6",
            "9b677cb5-df90-4bfa-9e06-1f5d8e267288",
            "67b2821a-c22c-48f2-8b9f-646da0e5e7b5",
            "81a11ec5-d970-4cb5-abf6-4dd08e4a74d8",
            "6f457100-060f-46a7-99b7-97454882a487",
            "a996d37a-009e-41aa-8441-181c42c4d654"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "71186452-3f3a-4de5-8d60-730f8a09fdd1",
          "title": "timeHelperTest",
          "fullFile": "D:\\Desktop\\VueElectron\\list-manager\\test\\helperTest\\timeHelperTest.ts",
          "file": "\\test\\helperTest\\timeHelperTest.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should wait 50ms",
              "fullTitle": "timeHelperTest should wait 50ms",
              "timedOut": false,
              "duration": 52,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const start = new Date().getTime();\nawait time_helper_1.default.delay(50);\nconst result = new Date().getTime() - (start + 50);\nassert.equal(result >= 0, true, 'has waited: ' + result);\nreturn;",
              "err": {},
              "uuid": "cfe755a3-b49e-447b-857f-b8ee956b29aa",
              "parentUUID": "71186452-3f3a-4de5-8d60-730f8a09fdd1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should wait 25ms",
              "fullTitle": "timeHelperTest should wait 25ms",
              "timedOut": false,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const start = new Date().getTime();\nawait time_helper_1.default.delay(25);\nconst result = new Date().getTime() - (start + 25);\nassert.equal(result >= 0, true, 'has waited: ' + result);\nreturn;",
              "err": {},
              "uuid": "f33a063f-1da3-484a-8f66-dbc470d0cd6c",
              "parentUUID": "71186452-3f3a-4de5-8d60-730f8a09fdd1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should wait 75ms",
              "fullTitle": "timeHelperTest should wait 75ms",
              "timedOut": false,
              "duration": 75,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const start = new Date().getTime();\nawait time_helper_1.default.delay(75);\nconst result = new Date().getTime() - (start + 75);\nassert.equal(result >= 0, true, 'has waited: ' + result);\nreturn;",
              "err": {},
              "uuid": "de26fbfa-75ba-4762-8bbc-37a6cc1bc609",
              "parentUUID": "71186452-3f3a-4de5-8d60-730f8a09fdd1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cfe755a3-b49e-447b-857f-b8ee956b29aa",
            "f33a063f-1da3-484a-8f66-dbc470d0cd6c",
            "de26fbfa-75ba-4762-8bbc-37a6cc1bc609"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 153,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0b50a232-a6f1-4341-b61f-e8c9adedff0b",
          "title": "TitleCheckerTest",
          "fullFile": "D:\\Desktop\\VueElectron\\list-manager\\test\\helperTest\\titleCheckHelperTest.ts",
          "file": "\\test\\helperTest\\titleCheckHelperTest.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should match (fastMatch)",
              "fullTitle": "TitleCheckerTest should match (fastMatch)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(await title_check_helper_1.default.fastMatch([\"Abc\"], [\"abcdefg\", \"ABCD\"]), true);\nassert.equal(await title_check_helper_1.default.fastMatch([\"Title Season 2\"], [\"title s2\"]), true);\nassert.equal(await title_check_helper_1.default.fastMatch([\"Title Title Season 2\"], [\"title title II\"]), true);\nassert.equal(await title_check_helper_1.default.fastMatch([\"ATitle\"], [\"BTitle\"]), false);\nassert.equal(await title_check_helper_1.default.fastMatch([\"Title ABC\"], [\"Title CBA\"]), true);\nassert.equal(await title_check_helper_1.default.fastMatch([\"Test\"], [\"Test III\"]), true);\nreturn;",
              "err": {},
              "uuid": "870b6e65-96d2-4a1d-9c6d-d2304509cb9b",
              "parentUUID": "0b50a232-a6f1-4341-b61f-e8c9adedff0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should match (skipFastMatch)",
              "fullTitle": "TitleCheckerTest should match (skipFastMatch)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(await title_check_helper_1.default.checkAnimeNamesInArray([\"Title\"], [\"ATitle\", \"title\"]), true);\nassert.equal(await title_check_helper_1.default.checkAnimeNamesInArray([\"Title\"], [\"ATitle\", \"Title\"]), true);\nassert.equal(await title_check_helper_1.default.checkAnimeNamesInArray([\"Title!\"], [\"ATitle\", \"title\"]), true);\nassert.equal(await title_check_helper_1.default.checkAnimeNamesInArray([\"Title!?\"], [\"ATitle\", \"title\"]), true);\nassert.equal(await title_check_helper_1.default.checkAnimeNamesInArray([\"Title Season 3\"], [\"ATitle\", \"Title\"]), true);\nassert.equal(await title_check_helper_1.default.checkAnimeNamesInArray([\"Title! Season 3\"], [\"ATitle\", \"Title\"]), true);\nassert.equal(await title_check_helper_1.default.checkAnimeNamesInArray([\"Title Season 3\"], [\"ATitle\", \"title\"]), true);\nassert.equal(await title_check_helper_1.default.checkAnimeNamesInArray([\"Title Season 3\"], [\"ATitle\", \"Ctitle\"]), false);\nassert.equal(await title_check_helper_1.default.checkAnimeNamesInArray([\"Title!\"], [\"ATitle\", \"titleG\"]), false);\nreturn;",
              "err": {},
              "uuid": "7e6edf75-4150-4d9e-bbdd-4e9b47243c4b",
              "parentUUID": "0b50a232-a6f1-4341-b61f-e8c9adedff0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove season from title",
              "fullTitle": "TitleCheckerTest should remove season from title",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(await title_check_helper_1.default.removeSeasonMarkesFromTitle(\"Title Season 2\"), \"Title\");\nassert.equal(await title_check_helper_1.default.removeSeasonMarkesFromTitle(\"Title III\"), \"Title\");\nassert.equal(await title_check_helper_1.default.removeSeasonMarkesFromTitle(\"Title Episode 2\"), \"Title Episode 2\");\nassert.equal(await title_check_helper_1.default.removeSeasonMarkesFromTitle(\"Title 2\"), \"Title\");\nassert.equal(await title_check_helper_1.default.removeSeasonMarkesFromTitle(\"Title 2nd -Test-\"), \"Title -Test-\");\nreturn;",
              "err": {},
              "uuid": "d568ecbd-f261-4d63-858a-e094b6fff1fc",
              "parentUUID": "0b50a232-a6f1-4341-b61f-e8c9adedff0b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "870b6e65-96d2-4a1d-9c6d-d2304509cb9b",
            "7e6edf75-4150-4d9e-bbdd-4e9b47243c4b",
            "d568ecbd-f261-4d63-858a-e094b6fff1fc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": null,
      "version": "4.0.1"
    }
  }
}