{
  "stats": {
    "suites": 12,
    "tests": 70,
    "passes": 69,
    "pending": 0,
    "failures": 1,
    "start": "2019-08-02T12:39:38.073Z",
    "end": "2019-08-02T12:39:38.527Z",
    "duration": 454,
    "testsRegistered": 70,
    "passPercent": 98.57142857142858,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "55aa8b29-d1f0-478d-8503-3136ecbd48f4",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f4d95506-2247-4433-9335-bbd4cf5069fd",
          "title": "AniDB Tests",
          "fullFile": "C:\\Users\\dbergmann\\Desktop\\list-manager\\test\\api\\anidb\\anidbNameListTest.ts",
          "file": "\\test\\api\\anidb\\anidbNameListTest.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should allow download (1/2)",
              "fullTitle": "AniDB Tests should allow download (1/2)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var x = new anidbNameList_1.default(false);\nanidbNameList_1.default.anidbNameManager.lastDownloadTime = undefined;\nassert.equal(x.InternalTesting().needDownload(), true);\nreturn;",
              "err": {},
              "uuid": "78e6f6fb-bbea-42d4-a3c1-069e98733590",
              "parentUUID": "f4d95506-2247-4433-9335-bbd4cf5069fd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow download (2/2)",
              "fullTitle": "AniDB Tests should allow download (2/2)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var a = new anidbNameList_1.default(false);\nvar twoDaysInMs = 172800000;\nanidbNameList_1.default.anidbNameManager.lastDownloadTime = new Date(Date.now() - twoDaysInMs * 2);\nassert.equal(a.InternalTesting().needDownload(), true);\nreturn;",
              "err": {},
              "uuid": "5aba27b6-5988-4c8d-936c-cc09db2c7edd",
              "parentUUID": "f4d95506-2247-4433-9335-bbd4cf5069fd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not allow download",
              "fullTitle": "AniDB Tests should not allow download",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var a = new anidbNameList_1.default(false);\nanidbNameList_1.default.anidbNameManager.lastDownloadTime = new Date(Date.now());\nassert.equal(a.InternalTesting().needDownload(), false);\nreturn;",
              "err": {},
              "uuid": "98efe546-ac2e-4282-a8d4-755c7f40ac4c",
              "parentUUID": "f4d95506-2247-4433-9335-bbd4cf5069fd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "78e6f6fb-bbea-42d4-a3c1-069e98733590",
            "5aba27b6-5988-4c8d-936c-cc09db2c7edd",
            "98efe546-ac2e-4282-a8d4-755c7f40ac4c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d23dc407-cd81-4f82-b414-3746a3923306",
          "title": "AniListApi Tests",
          "fullFile": "C:\\Users\\dbergmann\\Desktop\\list-manager\\test\\api\\anilist\\anilistApiTest.ts",
          "file": "\\test\\api\\anilist\\anilistApiTest.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return headers",
              "fullTitle": "AniListApi Tests should return headers",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var options = {\n    uri: 'https://graphql.anilist.co',\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n    },\n    body: JSON.stringify({\n        query: \"query\",\n        variables: \"variables\"\n    })\n};\nconst a = new aniListProvider_1.default();\nconst result = a[\"getGraphQLOptions\"](\"query\", \"variables\");\nassert_1.default.equal(options.body, result.body);\nassert_1.default.equal(options.headers + '', result.headers + '');\nassert_1.default.equal(options.method, result.method);\nassert_1.default.equal(options.uri, result.uri);\nreturn;",
              "err": {},
              "uuid": "dc494f7c-1c86-41b5-acb5-7a78dbdce2af",
              "parentUUID": "d23dc407-cd81-4f82-b414-3746a3923306",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should convert",
              "fullTitle": "AniListApi Tests should convert",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var rawdata = JSON.parse(fs_1.readFileSync(\"./test/api/anilist/testResponse/anilistUserListResponse.json\", { encoding: \"UTF-8\" }));\nvar collection = rawdata.data.MediaListCollection;\nvar entry = collection.lists[2].entries[3];\nvar anime = await aniListConverter_1.default.convertListEntryToAnime(entry, series_1.WatchStatus.COMPLETED);\nconst providerInfo = anime.listProviderInfos[0];\nconst highestWatchedResult = providerInfo.getHighestWatchedEpisode();\nif (highestWatchedResult) {\n    assert_1.default.strictEqual(highestWatchedResult.episode, 1);\n}\nelse {\n    assert_1.default.fail();\n}\nassert_1.default.strictEqual(await anime.getMaxEpisode(), 1);\nassert_1.default.strictEqual(providerInfo.watchStatus, series_1.WatchStatus.COMPLETED);\nassert_1.default.strictEqual(providerInfo.score, 60);\nreturn;",
              "err": {},
              "uuid": "4919d709-a5af-41f0-9e21-706d84f31ed0",
              "parentUUID": "d23dc407-cd81-4f82-b414-3746a3923306",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dc494f7c-1c86-41b5-acb5-7a78dbdce2af",
            "4919d709-a5af-41f0-9e21-706d84f31ed0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 24,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c13ab892-5a0f-44ef-8f10-966e9011be4e",
          "title": "ListControllerTest | Combine",
          "fullFile": "C:\\Users\\dbergmann\\Desktop\\list-manager\\test\\controller\\listControllerTest.ts",
          "file": "\\test\\controller\\listControllerTest.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "ListControllerTest | Combine \"before all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "lc['saveData'] = () => { };",
              "err": {},
              "uuid": "2693012f-0ed3-4f74-a622-cec0fd7f584d",
              "parentUUID": "c13ab892-5a0f-44ef-8f10-966e9011be4e",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "ListControllerTest | Combine \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "listController_1.default['mainList'] = [];",
              "err": {},
              "uuid": "47103df6-915c-4d13-ad3e-014bf5b03ebc",
              "parentUUID": "c13ab892-5a0f-44ef-8f10-966e9011be4e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should combine same entry",
              "fullTitle": "ListControllerTest | Combine should combine same entry",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var entry = [];\nentry.push(getFilledAnime());\nentry.push(getFilledAnime());\nvar a = await lc['addSeriesToMainList'](...entry);\nassert.equal(listController_1.default['mainList'].length, 1);",
              "err": {},
              "uuid": "84d84dc0-8a31-4aa5-ac98-a8db968de568",
              "parentUUID": "c13ab892-5a0f-44ef-8f10-966e9011be4e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should combine basic entrys correct",
              "fullTitle": "ListControllerTest | Combine should combine basic entrys correct",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var entry = [];\nentry.push(getFilledAnime());\nentry.push(getFilledAnime());\nfor (let index = 0; index < 20; index++) {\n    entry.push(getRandomeFilledAnime());\n}\nvar a = await lc['addSeriesToMainList'](...entry);\nassert.equal(listController_1.default['mainList'].length, 21);",
              "err": {},
              "uuid": "6283a148-1f31-4f5d-b9d3-4fac367b70a3",
              "parentUUID": "c13ab892-5a0f-44ef-8f10-966e9011be4e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should combine basic entrys with less data",
              "fullTitle": "ListControllerTest | Combine should combine basic entrys with less data",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var entry = [];\nvar x2 = getFilledAnime();\nx2.episodes = undefined;\nx2.releaseYear = undefined;\nentry.push(x2);\nentry.push(getFilledAnime());\nfor (let index = 0; index < 20; index++) {\n    entry.push(getRandomeFilledAnime());\n}\nvar a = await lc['addSeriesToMainList'](...entry);\nassert.equal(listController_1.default['mainList'].length, 21);\nreturn;",
              "err": {},
              "uuid": "21fc38fe-81a2-4131-b9c0-aeff43738b4d",
              "parentUUID": "c13ab892-5a0f-44ef-8f10-966e9011be4e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should combine basic entrys with season in title (1/4)",
              "fullTitle": "ListControllerTest | Combine should combine basic entrys with season in title (1/4)",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var entry = [];\nvar x2 = getFilledAnime();\nx2.seasonNumber = undefined;\nx2.names.engName = \"Test III\";\nentry.push(x2);\nentry.push(getFilledAnime());\nfor (let index = 0; index < 20; index++) {\n    entry.push(getRandomeFilledAnime());\n}\nvar a = await lc['addSeriesToMainList'](...entry);\nassert.equal(listController_1.default['mainList'].length, 21);\nreturn;",
              "err": {},
              "uuid": "0f96f028-7fd7-4dcf-b820-0e9bebe4b75c",
              "parentUUID": "c13ab892-5a0f-44ef-8f10-966e9011be4e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should combine basic entrys with season in title (2/4)",
              "fullTitle": "ListControllerTest | Combine should combine basic entrys with season in title (2/4)",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var entry = [];\nvar x2 = getFilledAnime();\nx2.seasonNumber = undefined;\nx2.names.engName = \"Test 3\";\nentry.push(x2);\nentry.push(getFilledAnime());\nfor (let index = 0; index < 20; index++) {\n    entry.push(getRandomeFilledAnime());\n}\nvar a = await lc['addSeriesToMainList'](...entry);\nassert.equal(listController_1.default['mainList'].length, 21);\nreturn;",
              "err": {},
              "uuid": "04ba3da5-8890-4f01-ae80-887e0cbf1188",
              "parentUUID": "c13ab892-5a0f-44ef-8f10-966e9011be4e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should combine basic entrys with season in title (3/4)",
              "fullTitle": "ListControllerTest | Combine should combine basic entrys with season in title (3/4)",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var entry = [];\nvar x2 = getFilledAnime();\nx2.names.engName = \"Test Season 3\";\nx2.releaseYear = 0;\nx2.episodes = 0;\nentry.push(x2);\nentry.push(getFilledAnime());\nfor (let index = 0; index < 20; index++) {\n    entry.push(getRandomeFilledAnime());\n}\nvar a = await lc['addSeriesToMainList'](...entry);\nassert.equal(listController_1.default['mainList'].length, 21);\nreturn;",
              "err": {},
              "uuid": "016c7ef0-3b94-4662-92c3-4fd7704283da",
              "parentUUID": "c13ab892-5a0f-44ef-8f10-966e9011be4e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should combine basic entrys with season in title (4/4)",
              "fullTitle": "ListControllerTest | Combine should combine basic entrys with season in title (4/4)",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var entry = [];\nlet x = getFilledAnime();\nx.seasonNumber = undefined;\nx.names.engName = \"Tesjo\";\nvar x2 = getFilledAnime();\nx2.names.engName = \"Tesjo x\";\nx2.releaseYear = 0;\nx2.episodes = 0;\nentry.push(x2);\nentry.push();\nfor (let index = 0; index < 22; index++) {\n    entry.push(getRandomeFilledAnime());\n}\nvar a = await lc['addSeriesToMainList'](...entry);\nassert.equal(listController_1.default['mainList'].length, 23);\nreturn;",
              "err": {},
              "uuid": "24616130-7327-4610-aad0-63f1467c29a3",
              "parentUUID": "c13ab892-5a0f-44ef-8f10-966e9011be4e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should sort list",
              "fullTitle": "ListControllerTest | Combine should sort list",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var entry = [];\nvar x2 = getFilledAnime();\nx2.names.engName = 'A';\nvar x3 = getFilledAnime();\nx3.names.engName = 'B';\nvar x4 = getFilledAnime();\nx4.names.engName = 'C';\nvar x5 = getFilledAnime();\nx5.names.engName = 'D';\nvar x6 = getFilledAnime();\nx6.names.engName = 'X';\nvar x7 = getFilledAnime();\nx7.names.engName = 'F';\nentry.push(x7);\nentry.push(x6);\nentry.push(x5);\nentry.push(x4);\nentry.push(x3);\nentry.push(x2);\nentry = await listHelper_1.default.shuffle(entry);\nentry = await listHelper_1.default.sortList(entry);\nassert.equal(entry[0].names.engName, x2.names.engName);\nassert.equal(entry[1].names.engName, x3.names.engName);\nassert.equal(entry[2].names.engName, x4.names.engName);\nreturn;",
              "err": {},
              "uuid": "4f953536-522a-48aa-8bd1-2d87619074dc",
              "parentUUID": "c13ab892-5a0f-44ef-8f10-966e9011be4e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should clean doubled entrys (1/2)",
              "fullTitle": "ListControllerTest | Combine should clean doubled entrys (1/2)",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var lpld = new listProviderLocalData_1.ListProviderLocalData();\nlpld.id = 2;\nlpld.episodes = 12;\nlpld.targetSeason = 1;\nvar x1 = getFilledAnime();\nx1.seasonNumber = 1;\nx1.listProviderInfos.push(lpld);\nvar x2 = getFilledAnime();\nx2.seasonNumber = 1;\nx2.listProviderInfos.push(lpld);\nx2.listProviderInfos[0].targetSeason = 2;\nvar x3 = getFilledAnime();\nx3.seasonNumber = 1;\nx3.listProviderInfos.push(lpld);\nx2.listProviderInfos[0].targetSeason = 3;\nawait lc.addSeriesToMainList(x1, x2, x3);\nassert.equal(listController_1.default['mainList'].length, 1);",
              "err": {},
              "uuid": "26417f81-898c-46ff-97c1-5515af7a78c4",
              "parentUUID": "c13ab892-5a0f-44ef-8f10-966e9011be4e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should clean doubled entrys (3/3)",
              "fullTitle": "ListControllerTest | Combine should clean doubled entrys (3/3)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var lpld = new listProviderLocalData_1.ListProviderLocalData();\nlpld.id = 2;\nlpld.episodes = 12;\nlpld.targetSeason = 1;\nvar x1 = getFilledAnime();\nx1.seasonNumber = 1;\nx1.listProviderInfos.push(lpld);\nvar x2 = getFilledAnime();\nx2.seasonNumber = undefined;\nx2.listProviderInfos.push(lpld);\nx2.listProviderInfos[0].targetSeason = undefined;\nlistController_1.default['mainList'] = [x1, x2];\nawait lc.addSeriesToMainList(x1, x2);\nassert.equal(listController_1.default['mainList'].length, 1);",
              "err": {},
              "uuid": "f356da78-9d20-472f-9ba8-040cdacc5502",
              "parentUUID": "c13ab892-5a0f-44ef-8f10-966e9011be4e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shouldnt clean doubled entrys (1/2)",
              "fullTitle": "ListControllerTest | Combine shouldnt clean doubled entrys (1/2)",
              "timedOut": false,
              "duration": 29,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var lpld = new listProviderLocalData_1.ListProviderLocalData();\nlpld.id = 2;\nlpld.episodes = 12;\nvar lpld2 = new listProviderLocalData_1.ListProviderLocalData();\nlpld2.id = 3;\nlpld2.episodes = 12;\nvar x1 = getFilledAnime();\nx1.seasonNumber = 1;\nx1.listProviderInfos.push(lpld);\nvar x2 = getFilledAnime();\nx2.seasonNumber = 2;\nx2.listProviderInfos.push(lpld2);\nconsole.log(x1);\nconsole.log(x2);\nawait lc.addSeriesToMainList(x1, x2);\nassert.equal(listController_1.default['mainList'].length, 2);",
              "err": {},
              "uuid": "15674947-92a5-44ca-a49b-00fbb5ccfe4f",
              "parentUUID": "c13ab892-5a0f-44ef-8f10-966e9011be4e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shouldnt clean doubled entrys (2/2)",
              "fullTitle": "ListControllerTest | Combine shouldnt clean doubled entrys (2/2)",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var lpld = new listProviderLocalData_1.ListProviderLocalData();\nlpld.id = 2;\nlpld.episodes = 12;\nvar lpld2 = new listProviderLocalData_1.ListProviderLocalData();\nlpld2.id = 3;\nlpld2.episodes = 12;\nvar x1 = getFilledAnime();\nx1.seasonNumber = undefined;\nx1.listProviderInfos.push(lpld);\nvar x2 = getFilledAnime();\nx2.seasonNumber = undefined;\nx2.listProviderInfos.push(lpld2);\nlistController_1.default['mainList'] = [x1, x2];\nconst x = await lc.addSeriesToMainList(x1, x2);\nassert.equal(listController_1.default['mainList'].length, 2);",
              "err": {},
              "uuid": "a79b3ff3-47ea-440e-ba28-e2e05aa89f67",
              "parentUUID": "c13ab892-5a0f-44ef-8f10-966e9011be4e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should clean doubled entrys (2/2)",
              "fullTitle": "ListControllerTest | Combine should clean doubled entrys (2/2)",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var lpld = new listProviderLocalData_1.ListProviderLocalData();\nlpld.id = 2;\nlpld.episodes = 12;\nvar x1 = getFilledAnime();\nx1.seasonNumber = undefined;\nx1.listProviderInfos.push(lpld);\nvar x2 = getFilledAnime();\nx2.seasonNumber = undefined;\nx2.listProviderInfos.push(lpld);\nlistController_1.default['mainList'] = [x1, x2];\nawait lc.addSeriesToMainList(x1, x2);\nassert.equal(listController_1.default['mainList'].length, 1);",
              "err": {},
              "uuid": "b8b700e8-ae18-48ea-bfdd-5a5966ca2f9a",
              "parentUUID": "c13ab892-5a0f-44ef-8f10-966e9011be4e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should clean doubled entrys (2/3)",
              "fullTitle": "ListControllerTest | Combine should clean doubled entrys (2/3)",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var lpld = new listProviderLocalData_1.ListProviderLocalData();\nlpld.id = 2;\nlpld.episodes = 12;\nvar x1 = getFilledAnime();\nx1.seasonNumber = undefined;\nx1.listProviderInfos.push(lpld);\nvar x2 = getFilledAnime();\nx2.seasonNumber = 1;\nx2.listProviderInfos.push(lpld);\nlistController_1.default['mainList'] = [x1, x2];\nawait lc.addSeriesToMainList(x1, x2);\nassert.equal(listController_1.default['mainList'].length, 1);",
              "err": {},
              "uuid": "07cee4c0-b4ce-424f-9dfb-a5d2e1485901",
              "parentUUID": "c13ab892-5a0f-44ef-8f10-966e9011be4e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "84d84dc0-8a31-4aa5-ac98-a8db968de568",
            "6283a148-1f31-4f5d-b9d3-4fac367b70a3",
            "21fc38fe-81a2-4131-b9c0-aeff43738b4d",
            "0f96f028-7fd7-4dcf-b820-0e9bebe4b75c",
            "04ba3da5-8890-4f01-ae80-887e0cbf1188",
            "016c7ef0-3b94-4662-92c3-4fd7704283da",
            "24616130-7327-4610-aad0-63f1467c29a3",
            "4f953536-522a-48aa-8bd1-2d87619074dc",
            "26417f81-898c-46ff-97c1-5515af7a78c4",
            "f356da78-9d20-472f-9ba8-040cdacc5502",
            "15674947-92a5-44ca-a49b-00fbb5ccfe4f",
            "a79b3ff3-47ea-440e-ba28-e2e05aa89f67",
            "b8b700e8-ae18-48ea-bfdd-5a5966ca2f9a",
            "07cee4c0-b4ce-424f-9dfb-a5d2e1485901"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 124,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2f230a49-7753-4544-8a96-3741ad092506",
          "title": "animeTest | Relations",
          "fullFile": "C:\\Users\\dbergmann\\Desktop\\list-manager\\test\\controller\\objects\\animeRelationTests.ts",
          "file": "\\test\\controller\\objects\\animeRelationTests.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "get all Relations based on prequel id",
              "fullTitle": "animeTest | Relations get all Relations based on prequel id",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const anime1 = getFilledAnime();\nanime1.listProviderInfos[0].id = 1;\nconst anime2 = getFilledAnime();\nanime2.listProviderInfos[0].id = 2;\nanime2.listProviderInfos[0].prequelId = 1;\nconst anime3 = getFilledAnime();\nanime3.listProviderInfos[0].id = 3;\nanime3.listProviderInfos[0].prequelId = 2;\nconst anime4 = getFilledAnime();\nanime4.listProviderInfos[0].id = 4;\nlet list = [anime1, anime2, anime3, anime4];\nlist = await listHelper_1.default.shuffle(list);\nconst result1 = await anime1.getAllRelations(list);\nconst result2 = await anime2.getAllRelations(list);\nconst result3 = await anime3.getAllRelations(list);\nassert_1.default.equal(result1.length, 2);\nassert_1.default.equal(result2.length, 2);\nassert_1.default.equal(result3.length, 2);\nassert_1.default.equal(await listHelper_1.default.isAnimeInList(result1, anime1), false);\nassert_1.default.equal(await listHelper_1.default.isAnimeInList(result2, anime2), false);\nassert_1.default.equal(await listHelper_1.default.isAnimeInList(result3, anime3), false);\nassert_1.default.equal(await listHelper_1.default.isAnimeInList(result1, anime4), false);\nassert_1.default.equal(await listHelper_1.default.isAnimeInList(result2, anime4), false);\nassert_1.default.equal(await listHelper_1.default.isAnimeInList(result3, anime4), false);",
              "err": {},
              "uuid": "b02eab3b-448f-4bdd-ae94-d9f88478aaa3",
              "parentUUID": "2f230a49-7753-4544-8a96-3741ad092506",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get all Relations based on sequel id",
              "fullTitle": "animeTest | Relations get all Relations based on sequel id",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const anime1 = getFilledAnime();\nanime1.listProviderInfos[0].id = 1;\nanime1.listProviderInfos[0].sequelId = 2;\nconst anime2 = getFilledAnime();\nanime2.listProviderInfos[0].id = 2;\nanime2.listProviderInfos[0].sequelId = 3;\nconst anime3 = getFilledAnime();\nanime3.listProviderInfos[0].id = 3;\nconst anime4 = getFilledAnime();\nanime4.listProviderInfos[0].id = 4;\nlet list = [anime1, anime2, anime3, anime4];\nlist = await listHelper_1.default.shuffle(list);\nconst result1 = await anime1.getAllRelations(list);\nconst result2 = await anime2.getAllRelations(list);\nconst result3 = await anime3.getAllRelations(list);\nassert_1.default.equal(result1.length, 2);\nassert_1.default.equal(result2.length, 2);\nassert_1.default.equal(result3.length, 2);\nassert_1.default.equal(await listHelper_1.default.isAnimeInList(result1, anime1), false);\nassert_1.default.equal(await listHelper_1.default.isAnimeInList(result2, anime2), false);\nassert_1.default.equal(await listHelper_1.default.isAnimeInList(result3, anime3), false);\nassert_1.default.equal(await listHelper_1.default.isAnimeInList(result1, anime4), false);\nassert_1.default.equal(await listHelper_1.default.isAnimeInList(result2, anime4), false);\nassert_1.default.equal(await listHelper_1.default.isAnimeInList(result3, anime4), false);",
              "err": {},
              "uuid": "592083a0-4471-4a0b-9c74-0195290c1927",
              "parentUUID": "2f230a49-7753-4544-8a96-3741ad092506",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get all Relations based on sequel id and prequel id",
              "fullTitle": "animeTest | Relations get all Relations based on sequel id and prequel id",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const anime1 = getFilledAnime();\nanime1.listProviderInfos[0].id = 1;\nanime1.listProviderInfos[0].sequelId = 2;\nconst anime2 = getFilledAnime();\nanime2.listProviderInfos[0].id = 2;\nanime2.listProviderInfos[0].sequelId = 3;\nanime2.listProviderInfos[0].prequelId = 1;\nconst anime3 = getFilledAnime();\nanime3.listProviderInfos[0].id = 3;\nanime2.listProviderInfos[0].prequelId = 2;\nconst anime4 = getFilledAnime();\nanime4.listProviderInfos[0].id = 4;\nlet list = [anime1, anime2, anime3, anime4];\nlist = await listHelper_1.default.shuffle(list);\nconst result1 = await anime1.getAllRelations(list);\nconst result2 = await anime2.getAllRelations(list);\nconst result3 = await anime3.getAllRelations(list);\nassert_1.default.equal(result1.length, 2);\nassert_1.default.equal(result2.length, 2);\nassert_1.default.equal(result3.length, 2);\nassert_1.default.equal(await listHelper_1.default.isAnimeInList(result1, anime1), false);\nassert_1.default.equal(await listHelper_1.default.isAnimeInList(result2, anime2), false);\nassert_1.default.equal(await listHelper_1.default.isAnimeInList(result3, anime3), false);\nassert_1.default.equal(await listHelper_1.default.isAnimeInList(result1, anime4), false);\nassert_1.default.equal(await listHelper_1.default.isAnimeInList(result2, anime4), false);\nassert_1.default.equal(await listHelper_1.default.isAnimeInList(result3, anime4), false);",
              "err": {},
              "uuid": "c5b184ed-7a1e-44b8-8cc5-54f9f1d0c72f",
              "parentUUID": "2f230a49-7753-4544-8a96-3741ad092506",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get all Relations based on provider id",
              "fullTitle": "animeTest | Relations get all Relations based on provider id",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const anime1 = getFilledAnime();\nanime1.listProviderInfos[0].id = 1;\nconst anime2 = getFilledAnime();\nanime2.listProviderInfos[0].id = 1;\nconst anime3 = getFilledAnime();\nanime3.listProviderInfos[0].id = 1;\nconst anime4 = getFilledAnime();\nanime4.listProviderInfos[0].id = 4;\nlet list = [anime1, anime2, anime3, anime4];\nlist = await listHelper_1.default.shuffle(list);\nconst result1 = await anime1.getAllRelations(list);\nconst result2 = await anime2.getAllRelations(list);\nconst result3 = await anime3.getAllRelations(list);\nassert_1.default.equal(result1.length, 2);\nassert_1.default.equal(result2.length, 2);\nassert_1.default.equal(result3.length, 2);\nassert_1.default.equal(await listHelper_1.default.isAnimeInList(result1, anime1), false);\nassert_1.default.equal(await listHelper_1.default.isAnimeInList(result2, anime2), false);\nassert_1.default.equal(await listHelper_1.default.isAnimeInList(result3, anime3), false);\nassert_1.default.equal(await listHelper_1.default.isAnimeInList(result1, anime4), false);\nassert_1.default.equal(await listHelper_1.default.isAnimeInList(result2, anime4), false);\nassert_1.default.equal(await listHelper_1.default.isAnimeInList(result3, anime4), false);",
              "err": {},
              "uuid": "05b279b3-7268-4a24-b7fe-76e191dac772",
              "parentUUID": "2f230a49-7753-4544-8a96-3741ad092506",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b02eab3b-448f-4bdd-ae94-d9f88478aaa3",
            "592083a0-4471-4a0b-9c74-0195290c1927",
            "c5b184ed-7a1e-44b8-8cc5-54f9f1d0c72f",
            "05b279b3-7268-4a24-b7fe-76e191dac772"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "73b11c95-5d99-45ba-bb14-089b54069490",
          "title": "animeTest | Sync",
          "fullFile": "C:\\Users\\dbergmann\\Desktop\\list-manager\\test\\controller\\objects\\animeSnycTests.ts",
          "file": "\\test\\controller\\objects\\animeSnycTests.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "can sync (1/3)",
              "fullTitle": "animeTest | Sync can sync (1/3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const anime = new series_1.default();\nproviderList_1.default.listProviderList.push(new testProvider_1.default(\"CanSync121\"));\nconst providerA = new listProviderLocalData_1.ListProviderLocalData(\"CanSync121\");\nproviderA.episodes = 12;\nfor (let index = 0; index < 12; index++) {\n    providerA.addOneEpisode(index);\n}\nproviderA.watchStatus = series_1.WatchStatus.CURRENT;\nproviderList_1.default.listProviderList.push(new testProvider_1.default(\"CanSync122\"));\nconst providerB = new listProviderLocalData_1.ListProviderLocalData(\"CanSync122\");\nproviderB.episodes = 24;\nfor (let index = 0; index < 24; index++) {\n    providerB.addOneEpisode(index);\n}\nproviderB.watchStatus = series_1.WatchStatus.COMPLETED;\nanime.episodes = 24;\nanime.listProviderInfos.push(providerA, providerB);\nassert_1.default.equal(await anime.getCanSyncStatus(), true);",
              "err": {},
              "uuid": "d1b45b9e-e90b-478d-ac57-00ffc5691c57",
              "parentUUID": "73b11c95-5d99-45ba-bb14-089b54069490",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can sync (2/3)",
              "fullTitle": "animeTest | Sync can sync (2/3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const anime = new series_1.default();\nproviderList_1.default.listProviderList.push(new testProvider_1.default(\"CanSync21\"));\nconst providerA = new listProviderLocalData_1.ListProviderLocalData(\"CanSync21\");\nproviderA.episodes = 24;\nfor (let index = 1; index < 25; index++) {\n    providerA.addOneEpisode(index);\n}\nproviderA.watchStatus = series_1.WatchStatus.COMPLETED;\nproviderList_1.default.listProviderList.push(new testProvider_1.default(\"CanSync22\"));\nconst providerB = new listProviderLocalData_1.ListProviderLocalData(\"CanSync22\");\nproviderB.episodes = 24;\nanime.episodes = 24;\nanime.listProviderInfos.push(providerA, providerB);\nassert_1.default.equal(await anime.getCanSyncStatus(), true);",
              "err": {},
              "uuid": "4c04ae87-08c1-424d-b50a-d589165e4bb2",
              "parentUUID": "73b11c95-5d99-45ba-bb14-089b54069490",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can sync (3/3)",
              "fullTitle": "animeTest | Sync can sync (3/3)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const anime = new series_1.default();\nproviderList_1.default.listProviderList.push(new testProvider_1.default(\"CanSync31\"));\nconst providerA = new listProviderLocalData_1.ListProviderLocalData(\"CanSync31\");\nproviderA.episodes = 24;\nfor (let index = 1; index < 12; index++) {\n    providerA.addOneEpisode(index);\n}\nproviderA.watchStatus = series_1.WatchStatus.COMPLETED;\nproviderList_1.default.listProviderList.push(new testProvider_1.default(\"CanSync32\"));\nconst providerB = new listProviderLocalData_1.ListProviderLocalData(\"CanSync32\");\nproviderB.episodes = 24;\nanime.episodes = 24;\nanime.listProviderInfos.push(providerA, providerB);\nassert_1.default.equal(await anime.getCanSyncStatus(), true);",
              "err": {},
              "uuid": "919e22f8-88c3-46ad-9662-c193d8316c9b",
              "parentUUID": "73b11c95-5d99-45ba-bb14-089b54069490",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cant sync (1/7)",
              "fullTitle": "animeTest | Sync cant sync (1/7)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const anime = new series_1.default();\nproviderList_1.default.listProviderList.push(new testProvider_1.default(\"A\"));\nconst providerA = new listProviderLocalData_1.ListProviderLocalData(\"A\");\nproviderA.episodes = 24;\nfor (let index = 0; index < 25; index++) {\n    providerA.addOneEpisode(index);\n}\nproviderA.watchStatus = series_1.WatchStatus.CURRENT;\nproviderList_1.default.listProviderList.push(new testProvider_1.default(\"B\"));\nconst providerB = new listProviderLocalData_1.ListProviderLocalData(\"B\");\nproviderB.episodes = 12;\nfor (let index = 0; index < 13; index++) {\n    providerB.addOneEpisode(index);\n}\nproviderB.addOneEpisode(1);\nproviderB.watchStatus = series_1.WatchStatus.COMPLETED;\nanime.episodes = 24;\nanime.listProviderInfos.push(providerA, providerB);\nassert_1.default.equal(await anime.getCanSyncStatus(), false);",
              "err": {},
              "uuid": "71951123-fb3f-45c5-a5a1-bb88ff0a2676",
              "parentUUID": "73b11c95-5d99-45ba-bb14-089b54069490",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cant sync (2/7)",
              "fullTitle": "animeTest | Sync cant sync (2/7)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const anime = new series_1.default();\nproviderList_1.default.listProviderList.push(new testProvider_1.default(\"G\"));\nconst providerA = new listProviderLocalData_1.ListProviderLocalData(\"G\");\nproviderA.episodes = 12;\nfor (let index = 0; index < 13; index++) {\n    providerA.addOneEpisode(index);\n}\nproviderA.watchStatus = series_1.WatchStatus.COMPLETED;\nproviderList_1.default.listProviderList.push(new testProvider_1.default(\"C\"));\nconst providerB = new listProviderLocalData_1.ListProviderLocalData(\"C\");\nproviderB.episodes = 12;\nfor (let index = 0; index < 13; index++) {\n    providerB.addOneEpisode(index);\n}\nproviderB.addOneEpisode(1);\nproviderB.watchStatus = series_1.WatchStatus.COMPLETED;\nanime.episodes = 24;\nanime.listProviderInfos.push(providerA, providerB);\nassert_1.default.equal(await anime.getCanSyncStatus(), false);",
              "err": {},
              "uuid": "d35f72be-894d-4861-b416-da8b4868f42b",
              "parentUUID": "73b11c95-5d99-45ba-bb14-089b54069490",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cant sync (3/7)",
              "fullTitle": "animeTest | Sync cant sync (3/7)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const anime = new series_1.default();\nproviderList_1.default.listProviderList.push(new testProvider_1.default(\"E\"));\nconst providerA = new listProviderLocalData_1.ListProviderLocalData(\"E\");\nproviderA.episodes = 12;\nfor (let index = 0; index < 12; index++) {\n    providerA.addOneEpisode(index);\n}\nproviderA.watchStatus = series_1.WatchStatus.CURRENT;\nproviderList_1.default.listProviderList.push(new testProvider_1.default(\"F\", false));\nconst providerB = new listProviderLocalData_1.ListProviderLocalData(\"F\");\nproviderB.episodes = 24;\nfor (let index = 0; index < 24; index++) {\n    providerB.addOneEpisode(index);\n}\nproviderB.watchStatus = series_1.WatchStatus.COMPLETED;\nanime.episodes = 24;\nanime.listProviderInfos.push(providerA, providerB);\nassert_1.default.equal(await anime.getCanSyncStatus(), false);",
              "err": {},
              "uuid": "2715abf6-09b9-4eb8-9ce2-0814df442411",
              "parentUUID": "73b11c95-5d99-45ba-bb14-089b54069490",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cant sync (4/7)",
              "fullTitle": "animeTest | Sync cant sync (4/7)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const anime = new series_1.default();\nproviderList_1.default.listProviderList.push(new testProvider_1.default(\"A\"));\nconst providerA = new listProviderLocalData_1.ListProviderLocalData(\"A\");\nproviderA.episodes = 12;\nfor (let index = 0; index < 12; index++) {\n    providerA.addOneEpisode(index);\n}\nproviderA.watchStatus = series_1.WatchStatus.CURRENT;\nanime.episodes = 24;\nanime.listProviderInfos.push(providerA);\nassert_1.default.equal(await anime.getCanSyncStatus(), false);",
              "err": {},
              "uuid": "9ba59c08-e93f-4ab7-b24c-286492f862f0",
              "parentUUID": "73b11c95-5d99-45ba-bb14-089b54069490",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cant sync (5/7)",
              "fullTitle": "animeTest | Sync cant sync (5/7)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const anime = new series_1.default();\nproviderList_1.default.listProviderList.push(new testProvider_1.default(\"UU\"));\nconst providerA = new listProviderLocalData_1.ListProviderLocalData(\"UU\");\nproviderA.episodes = 12;\nproviderA.lastUpdate = new Date(100);\nfor (let index = 1; index < 13; index++) {\n    providerA.addOneEpisode(index);\n}\nproviderA.watchStatus = series_1.WatchStatus.CURRENT;\nproviderList_1.default.listProviderList.push(new testProvider_1.default(\"JJ\"));\nconst providerB = new listProviderLocalData_1.ListProviderLocalData(\"JJ\");\nproviderB.lastUpdate = new Date(50);\nfor (let index = 1; index < 5; index++) {\n    providerB.addOneEpisode(index);\n}\nproviderB.watchStatus = series_1.WatchStatus.COMPLETED;\nanime.episodes = 24;\nanime.listProviderInfos.push(providerA, providerB);\nassert_1.default.equal(await anime.getCanSyncStatus(), false);",
              "err": {},
              "uuid": "0e269010-ba72-42f2-b2a1-eed8034913c0",
              "parentUUID": "73b11c95-5d99-45ba-bb14-089b54069490",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cant sync (6/7)",
              "fullTitle": "animeTest | Sync cant sync (6/7)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const anime = new series_1.default();\nproviderList_1.default.listProviderList.push(new testProvider_1.default(\"T\"));\nconst providerA = new listProviderLocalData_1.ListProviderLocalData(\"T\");\nproviderA.lastUpdate = new Date(0);\nfor (let index = 0; index < 12; index++) {\n    providerA.addOneEpisode(index);\n}\nproviderA.watchStatus = series_1.WatchStatus.CURRENT;\nproviderList_1.default.listProviderList.push(new testProvider_1.default(\"O\"));\nconst providerB = new listProviderLocalData_1.ListProviderLocalData(\"O\");\nproviderB.episodes = 24;\nfor (let index = 1; index < 25; index++) {\n    providerB.addOneEpisode(index);\n}\nproviderList_1.default.listProviderList.push(new testProvider_1.default(\"M\"));\nconst providerC = new listProviderLocalData_1.ListProviderLocalData(\"M\");\nproviderC.episodes = 24;\nfor (let index = 1; index < 25; index++) {\n    providerC.addOneEpisode(index);\n}\nproviderC.watchStatus = series_1.WatchStatus.COMPLETED;\nanime.episodes = 24;\nanime.listProviderInfos.push(providerA, providerB, providerC);\nassert_1.default.equal(await anime.getCanSyncStatus(), false);",
              "err": {},
              "uuid": "27979b45-6625-4e14-9cbe-229af77f4144",
              "parentUUID": "73b11c95-5d99-45ba-bb14-089b54069490",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cant sync (7/7)",
              "fullTitle": "animeTest | Sync cant sync (7/7)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const anime = new series_1.default();\nproviderList_1.default.listProviderList.push(new testProvider_1.default(\"TestProvider1\"));\nconst providerA = new listProviderLocalData_1.ListProviderLocalData(\"TestProvider1\");\nproviderA.lastUpdate = new Date(\"2019-07-24T19:09:37.373Z\");\nproviderA.episodes = 12;\nfor (let index = 1; index < 13; index++) {\n    providerA.addOneEpisode(index);\n}\nproviderA.watchStatus = series_1.WatchStatus.CURRENT;\nproviderList_1.default.listProviderList.push(new testProvider_1.default(\"TestProvider2\"));\nconst providerB = new listProviderLocalData_1.ListProviderLocalData(\"TestProvider2\");\nproviderB.lastUpdate = new Date(\"2019-07-24T19:09:37.759Z\");\nfor (let index = 1; index < 13; index++) {\n    providerB.addOneEpisode(index);\n}\nanime.listProviderInfos.push(providerA, providerB);\nassert_1.default.equal(await anime.getCanSyncStatus(), false);",
              "err": {},
              "uuid": "9dbd4049-1a82-4863-8100-6423c33324bf",
              "parentUUID": "73b11c95-5d99-45ba-bb14-089b54069490",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d1b45b9e-e90b-478d-ac57-00ffc5691c57",
            "4c04ae87-08c1-424d-b50a-d589165e4bb2",
            "919e22f8-88c3-46ad-9662-c193d8316c9b",
            "71951123-fb3f-45c5-a5a1-bb88ff0a2676",
            "d35f72be-894d-4861-b416-da8b4868f42b",
            "2715abf6-09b9-4eb8-9ce2-0814df442411",
            "9ba59c08-e93f-4ab7-b24c-286492f862f0",
            "0e269010-ba72-42f2-b2a1-eed8034913c0",
            "27979b45-6625-4e14-9cbe-229af77f4144",
            "9dbd4049-1a82-4863-8100-6423c33324bf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a132531a-80a9-438e-a871-8ea640e5dfb5",
          "title": "animeTest",
          "fullFile": "C:\\Users\\dbergmann\\Desktop\\list-manager\\test\\controller\\objects\\animeTest.ts",
          "file": "\\test\\controller\\objects\\animeTest.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should have a id",
              "fullTitle": "animeTest should have a id",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const anime = new series_1.default();\nassert.notEqual(anime.id.length, 0);\nreturn;",
              "err": {},
              "uuid": "727a9b55-96d0-4fd5-86e9-4c0d2d1a9cff",
              "parentUUID": "a132531a-80a9-438e-a871-8ea640e5dfb5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return season (1/3)",
              "fullTitle": "animeTest should return season (1/3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const anime = new series_1.default();\nanime.seasonNumber = 1;\nassert.equal(await anime.getSeason(), 1);\nreturn;",
              "err": {},
              "uuid": "da3e0f5e-6fab-49e5-bdd0-6377a448321d",
              "parentUUID": "a132531a-80a9-438e-a871-8ea640e5dfb5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return season (2/3)",
              "fullTitle": "animeTest should return season (2/3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const anime = new series_1.default();\nanime.names.engName = 'Test 3';\nassert.equal(await anime.getSeason(), 3);\nreturn;",
              "err": {},
              "uuid": "b46f2ecd-4bd2-4030-a0bf-2b6a6eb95ff2",
              "parentUUID": "a132531a-80a9-438e-a871-8ea640e5dfb5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return season (3/3)",
              "fullTitle": "animeTest should return season (3/3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const anime = new series_1.default();\nanime.names.engName = 'Test III';\nassert.equal(await anime.getSeason(), 3);\nreturn;",
              "err": {},
              "uuid": "49323423-b0e4-4c73-b6fe-dba197cb2146",
              "parentUUID": "a132531a-80a9-438e-a871-8ea640e5dfb5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return last provider",
              "fullTitle": "animeTest should return last provider",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const anime = new series_1.default();\nconst providerA = new listProviderLocalData_1.ListProviderLocalData();\nproviderA.lastUpdate = new Date(100);\nproviderA.watchProgress = [];\nconst providerB = new listProviderLocalData_1.ListProviderLocalData();\nproviderB.watchProgress = [];\nproviderB.lastUpdate = new Date(50);\nanime.listProviderInfos.push(providerA, providerB);\nassert.equal(await anime['getLastUpdatedProvider'](), providerA);\nreturn;",
              "err": {},
              "uuid": "530e0e52-9237-418d-881c-5a2c0dbc20a6",
              "parentUUID": "a132531a-80a9-438e-a871-8ea640e5dfb5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return last watchprogress",
              "fullTitle": "animeTest should return last watchprogress",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const anime = new series_1.default();\nconst providerA = new listProviderLocalData_1.ListProviderLocalData();\nproviderA.lastUpdate = new Date(2);\nproviderA.addOneEpisode(5);\nconst providerB = new listProviderLocalData_1.ListProviderLocalData();\nproviderB.lastUpdate = new Date(1);\nproviderB.addOneEpisode(4);\nanime.listProviderInfos.push(providerA, providerB);\nconst result = await anime.getLastWatchProgress();\nif (typeof result != 'undefined') {\n    assert.equal(result.episode, 5);\n}\nassert.notEqual(typeof result, 'undefined');\nreturn;",
              "err": {},
              "uuid": "c1cf101c-dd15-4215-a61e-1d5e858b3d24",
              "parentUUID": "a132531a-80a9-438e-a871-8ea640e5dfb5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should all episodes (1/3)",
              "fullTitle": "animeTest should all episodes (1/3)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const anime = new series_1.default();\nconst providerA = new listProviderLocalData_1.ListProviderLocalData();\nproviderA.episodes = 10;\nconst providerB = new listProviderLocalData_1.ListProviderLocalData();\nproviderB.episodes = 11;\nanime.listProviderInfos.push(providerA, providerB);\nconst allEpisodes = await anime.getAllEpisodes();\nassert.deepStrictEqual(allEpisodes, [10, 11]);\nreturn;",
              "err": {},
              "uuid": "af1bcd4e-03de-4467-a55e-1791ec7cd6d0",
              "parentUUID": "a132531a-80a9-438e-a871-8ea640e5dfb5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should all episodes (2/3)",
              "fullTitle": "animeTest should all episodes (2/3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const anime = new series_1.default();\nconst providerA = new listProviderLocalData_1.ListProviderLocalData();\nproviderA.episodes = 10;\nconst providerB = new listProviderLocalData_1.ListProviderLocalData();\nanime.episodes = 11;\nanime.listProviderInfos.push(providerA, providerB);\nassert.deepStrictEqual(await anime.getAllEpisodes(), [10, 11]);\nreturn;",
              "err": {},
              "uuid": "35b843fd-8d9e-411f-ac2c-a8a2c6b11a86",
              "parentUUID": "a132531a-80a9-438e-a871-8ea640e5dfb5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should all episodes (3/3)",
              "fullTitle": "animeTest should all episodes (3/3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const anime = new series_1.default();\nconst providerA = new listProviderLocalData_1.ListProviderLocalData();\nanime.listProviderInfos.push(providerA);\nassert.deepStrictEqual(await anime.getAllEpisodes(), []);\nreturn;",
              "err": {},
              "uuid": "b0a92a6d-1682-441c-a77b-bf1a193dd432",
              "parentUUID": "a132531a-80a9-438e-a871-8ea640e5dfb5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should max episode (1/3)",
              "fullTitle": "animeTest should max episode (1/3)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const anime = new series_1.default();\nconst providerA = new listProviderLocalData_1.ListProviderLocalData();\nproviderA.episodes = 12;\nconst providerB = new listProviderLocalData_1.ListProviderLocalData();\nanime.episodes = 11;\nanime.listProviderInfos.push(providerA, providerB);\nassert.equal(anime.getMaxEpisode(), 12);\nreturn;",
              "err": {},
              "uuid": "96b655ff-0c8b-4188-abe7-3ef1fed80b5f",
              "parentUUID": "a132531a-80a9-438e-a871-8ea640e5dfb5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should max episode (2/3)",
              "fullTitle": "animeTest should max episode (2/3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const anime = new series_1.default();\nconst providerA = new listProviderLocalData_1.ListProviderLocalData();\nproviderA.episodes = 12;\nconst providerB = new listProviderLocalData_1.ListProviderLocalData();\nproviderB.episodes = 24;\nanime.episodes = 11;\nanime.listProviderInfos.push(providerA, providerB);\nassert.strictEqual(anime.getMaxEpisode(), 24);\nreturn;",
              "err": {},
              "uuid": "1218eb8d-ce18-4a06-aedf-6ce314c006e9",
              "parentUUID": "a132531a-80a9-438e-a871-8ea640e5dfb5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should max episode (3/3)",
              "fullTitle": "animeTest should max episode (3/3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const anime = new series_1.default();\nconst providerA = new listProviderLocalData_1.ListProviderLocalData();\nproviderA.episodes = 12;\nconst providerB = new listProviderLocalData_1.ListProviderLocalData();\nproviderB.episodes = 24;\nanime.episodes = 11;\nanime.listProviderInfos.push(providerA, providerB);\nassert.throws(anime.getMaxEpisode);\nreturn;",
              "err": {},
              "uuid": "581adbe8-8b97-4b7c-8fc1-ea82afdb2f3f",
              "parentUUID": "a132531a-80a9-438e-a871-8ea640e5dfb5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "727a9b55-96d0-4fd5-86e9-4c0d2d1a9cff",
            "da3e0f5e-6fab-49e5-bdd0-6377a448321d",
            "b46f2ecd-4bd2-4030-a0bf-2b6a6eb95ff2",
            "49323423-b0e4-4c73-b6fe-dba197cb2146",
            "530e0e52-9237-418d-881c-5a2c0dbc20a6",
            "c1cf101c-dd15-4215-a61e-1d5e858b3d24",
            "af1bcd4e-03de-4467-a55e-1791ec7cd6d0",
            "35b843fd-8d9e-411f-ac2c-a8a2c6b11a86",
            "b0a92a6d-1682-441c-a77b-bf1a193dd432",
            "96b655ff-0c8b-4188-abe7-3ef1fed80b5f",
            "1218eb8d-ce18-4a06-aedf-6ce314c006e9",
            "581adbe8-8b97-4b7c-8fc1-ea82afdb2f3f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4685e3cf-70f9-4724-9779-6cb670b7123d",
          "title": "namesTest",
          "fullFile": "C:\\Users\\dbergmann\\Desktop\\list-manager\\test\\controller\\objects\\namesTest.ts",
          "file": "\\test\\controller\\objects\\namesTest.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should detect kanji",
              "fullTitle": "namesTest should detect kanji",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const names = new names_1.default();\nassert.equal(await names.InternalTesting().hasKanji('テスト'), true);\nassert.equal(await names.InternalTesting().hasKanji('test'), false);\nreturn;",
              "err": {},
              "uuid": "a4c3a47b-f4d8-43dd-8267-9d084bb1fdf0",
              "parentUUID": "4685e3cf-70f9-4724-9779-6cb670b7123d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should extract season number from title",
              "fullTitle": "namesTest should extract season number from title",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const names = new names_1.default();\nassert.equal(await names.InternalTesting().getSeasonNumberFromTitle('Title 2'), 2, 'Title 2');\nassert.equal(await names.InternalTesting().getSeasonNumberFromTitle('Title II'), 2, 'Title II');\nassert.equal(await names.InternalTesting().getSeasonNumberFromTitle('Title III'), 3, 'Title III');\nassert.equal(await names.InternalTesting().getSeasonNumberFromTitle('Title 2nd Season'), 2, 'Title 2nd Season');\nassert.equal(await names.InternalTesting().getSeasonNumberFromTitle('Title 3nd Season -Test-'), 3, 'Title 3nd Season -Test-');\nassert.equal(await names.InternalTesting().getSeasonNumberFromTitle('Title Season 2 -Test-'), 2, 'Title Season 2 -Test-');\nreturn;",
              "err": {},
              "uuid": "ac79866b-624e-4a81-b8d6-72fb575351b5",
              "parentUUID": "4685e3cf-70f9-4724-9779-6cb670b7123d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should detect no romaji name",
              "fullTitle": "namesTest should detect no romaji name",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const names = new names_1.default();\nnames.mainName = 'テスト';\ntry {\n    await names.getRomajiName();\n    assert.equal(false, true);\n}\ncatch (err) {\n    assert.equal(true, true);\n}\nreturn;",
              "err": {},
              "uuid": "50b5f003-362b-4249-98fd-9d5afa61eb7b",
              "parentUUID": "4685e3cf-70f9-4724-9779-6cb670b7123d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return romaji name",
              "fullTitle": "namesTest should return romaji name",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const names = new names_1.default();\nnames.mainName = 'テスト';\nnames.romajiName = 'test';\nassert.equal(await names.getRomajiName(), 'test');\nreturn;",
              "err": {},
              "uuid": "0018cd4a-6c17-48cf-a688-8c61f301d823",
              "parentUUID": "4685e3cf-70f9-4724-9779-6cb670b7123d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return all names",
              "fullTitle": "namesTest should return all names",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const names = new names_1.default();\nnames.mainName = 'テスト';\nnames.romajiName = 'test';\nnames.shortName = '';\nassert.equal((await names.getAllNames()).length, 2);\nreturn;",
              "err": {},
              "uuid": "e96b27c8-552e-4047-adc6-065d99b781b0",
              "parentUUID": "4685e3cf-70f9-4724-9779-6cb670b7123d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a4c3a47b-f4d8-43dd-8267-9d084bb1fdf0",
            "ac79866b-624e-4a81-b8d6-72fb575351b5",
            "50b5f003-362b-4249-98fd-9d5afa61eb7b",
            "0018cd4a-6c17-48cf-a688-8c61f301d823",
            "e96b27c8-552e-4047-adc6-065d99b781b0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7a1b9b34-0ad0-4a29-89e4-f077cd7be282",
          "title": "providerTest",
          "fullFile": "C:\\Users\\dbergmann\\Desktop\\list-manager\\test\\controller\\objects\\providerInfoTest.ts",
          "file": "\\test\\controller\\objects\\providerInfoTest.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should add to watchlist",
              "fullTitle": "providerTest should add to watchlist",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const providerInfo = new listProviderLocalData_1.ListProviderLocalData();\nproviderInfo.addOneEpisode(1);\nproviderInfo.addOneEpisode(2);\nproviderInfo.addOneEpisode(3);\nif (typeof providerInfo.watchProgress != 'undefined') {\n    assert.equal(providerInfo.watchProgress.length, 3);\n}\nelse {\n    assert.notEqual(typeof providerInfo.watchProgress, 'undefined');\n}\nreturn;",
              "err": {},
              "uuid": "56cf2806-aee1-434a-bb94-5deb9bf72872",
              "parentUUID": "7a1b9b34-0ad0-4a29-89e4-f077cd7be282",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove from watchlist",
              "fullTitle": "providerTest should remove from watchlist",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const providerInfo = new listProviderLocalData_1.ListProviderLocalData();\nproviderInfo.addOneEpisode(1);\nproviderInfo.addOneEpisode(2);\nproviderInfo.addOneEpisode(3);\nproviderInfo.removeOneWatchProgress(new watchProgress_1.default(2));\nif (typeof providerInfo.watchProgress != 'undefined') {\n    assert.equal(providerInfo.watchProgress.length, 2);\n}\nelse {\n    assert.notEqual(typeof providerInfo.watchProgress, 'undefined');\n}\nreturn;",
              "err": {},
              "uuid": "2181f430-9475-4bfc-8b3f-868b7297e9cf",
              "parentUUID": "7a1b9b34-0ad0-4a29-89e4-f077cd7be282",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the last watched episode",
              "fullTitle": "providerTest should return the last watched episode",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const providerInfo = new listProviderLocalData_1.ListProviderLocalData();\nproviderInfo.addOneEpisode(1);\nproviderInfo.addOneEpisode(2);\nproviderInfo.addOneEpisode(4);\nproviderInfo.addOneEpisode(6);\nconst result = providerInfo.getHighestWatchedEpisode();\nif (typeof result != 'undefined') {\n    assert.equal(result.episode, 6);\n}\nassert.notEqual(typeof result, 'undefined');\nreturn;",
              "err": {},
              "uuid": "523c73c7-86bf-4f69-9f5b-6ee25fb1730e",
              "parentUUID": "7a1b9b34-0ad0-4a29-89e4-f077cd7be282",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should merge same provider",
              "fullTitle": "providerTest should merge same provider",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const providerInfoA = new listProviderLocalData_1.ListProviderLocalData();\nproviderInfoA.id = 2;\nproviderInfoA.addOneEpisode(1);\nproviderInfoA.episodes = 10;\nproviderInfoA.score = 11;\nproviderInfoA.watchStatus = series_1.WatchStatus.CURRENT;\nproviderInfoA.sequelId = 10;\nproviderInfoA.lastUpdate = new Date(10000);\nconst providerInfoB = new listProviderLocalData_1.ListProviderLocalData();\nproviderInfoB.id = 2;\nproviderInfoB.addOneEpisode(1);\nproviderInfoB.addOneEpisode(2);\nproviderInfoB.episodes = 10;\nproviderInfoB.score = 12;\nproviderInfoB.watchStatus = series_1.WatchStatus.COMPLETED;\nproviderInfoB.sequelId = 12;\nproviderInfoB.lastUpdate = new Date(20000);\nproviderInfoB.publicScore = 15;\nproviderInfoB.prequelId = 105;\nconst providerMerged = await listProviderLocalData_1.ListProviderLocalData.mergeProviderInfos(providerInfoA, providerInfoB);\nconst result = providerMerged.getHighestWatchedEpisode();\nif (typeof result != 'undefined') {\n    assert.equal(result.episode, 2);\n}\nassert.notEqual(typeof result, 'undefined');\nassert.equal(providerMerged.sequelId, 12);\nassert.equal(providerMerged.score, 12);\nassert.equal(providerMerged.watchStatus, series_1.WatchStatus.COMPLETED);\nassert.equal(providerMerged.publicScore, 15);\nassert.equal(providerMerged.prequelId, 105);",
              "err": {},
              "uuid": "75a98c1c-5b6e-47e5-b6b3-1515eb3cb76c",
              "parentUUID": "7a1b9b34-0ad0-4a29-89e4-f077cd7be282",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "56cf2806-aee1-434a-bb94-5deb9bf72872",
            "2181f430-9475-4bfc-8b3f-868b7297e9cf",
            "523c73c7-86bf-4f69-9f5b-6ee25fb1730e",
            "75a98c1c-5b6e-47e5-b6b3-1515eb3cb76c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "20d4dfe3-21d8-42b4-9925-7ee26ecd8a38",
          "title": "listHelperTest",
          "fullFile": "C:\\Users\\dbergmann\\Desktop\\list-manager\\test\\helperTest\\listHelperTest.ts",
          "file": "\\test\\helperTest\\listHelperTest.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should clean array",
              "fullTitle": "listHelperTest should clean array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var arr = await listHelper_1.default.cleanArray([null, undefined, '']);\nassert.equal(arr.length, 0);\nreturn;",
              "err": {},
              "uuid": "ba63ef5a-040b-4d51-868e-dd8027affa95",
              "parentUUID": "20d4dfe3-21d8-42b4-9925-7ee26ecd8a38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get most frequency occur (1/2)",
              "fullTitle": "listHelperTest should get most frequency occur (1/2)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var arr = await listHelper_1.default.findMostFrequent([1, 1, 0, 1, 1, 0]);\nassert.equal(arr, 1);\nreturn;",
              "err": {},
              "uuid": "4e379e31-0897-489d-b673-80f3a9ac5c81",
              "parentUUID": "20d4dfe3-21d8-42b4-9925-7ee26ecd8a38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get most frequency occur (2/2)",
              "fullTitle": "listHelperTest should get most frequency occur (2/2)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var arr = await listHelper_1.default.findMostFrequent(await listHelper_1.default.cleanArray([1]));\nassert.equal(arr, 1);\nreturn;",
              "err": {},
              "uuid": "33ff8ef3-2e2f-4b30-a3cd-29f2dd7f44f7",
              "parentUUID": "20d4dfe3-21d8-42b4-9925-7ee26ecd8a38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return undefined",
              "fullTitle": "listHelperTest should return undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var arr = await listHelper_1.default.findMostFrequent([]);\nassert.equal(typeof arr, 'undefined');\nreturn;",
              "err": {},
              "uuid": "e0c002b5-fc82-4b57-9c49-f011d318dfb1",
              "parentUUID": "20d4dfe3-21d8-42b4-9925-7ee26ecd8a38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should find entry existing in list",
              "fullTitle": "listHelperTest should find entry existing in list",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const entry1 = new series_1.default();\nentry1.id = '1';\nconst entry2 = new series_1.default();\nentry2.id = '2';\nconst entry3 = new series_1.default();\nentry3.id = '3';\nconst list = [entry1, entry2, entry3];\nconst result = await listHelper_1.default.isAnimeInList(list, entry2);\nassert.equal(result, true);",
              "err": {},
              "uuid": "c1a88846-e4e4-42fa-9bf9-f602c756e26a",
              "parentUUID": "20d4dfe3-21d8-42b4-9925-7ee26ecd8a38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shouldnt find any entry",
              "fullTitle": "listHelperTest shouldnt find any entry",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const entry1 = new series_1.default();\nentry1.id = '1';\nconst entry2 = new series_1.default();\nentry2.id = '2';\nconst entry3 = new series_1.default();\nentry3.id = '3';\nconst list = [entry1, entry3];\nconst result = await listHelper_1.default.isAnimeInList(list, entry2);\nassert.equal(result, false);",
              "err": {},
              "uuid": "a2a6b211-d7ff-4b5e-ba18-76b5ba5c4c0e",
              "parentUUID": "20d4dfe3-21d8-42b4-9925-7ee26ecd8a38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check list type",
              "fullTitle": "listHelperTest should check list type",
              "timedOut": false,
              "duration": 9,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const numberList = [1, 2, 3];\nconst watchprogressList = [new watchProgress_1.default(1), new watchProgress_1.default(2), new watchProgress_1.default(3)];\nassert.strictEqual(await listHelper_1.default.checkType(numberList, Number), true, \"numberList is type of number\");\nassert.strictEqual(await listHelper_1.default.checkType(watchprogressList, watchProgress_1.default), true, \"watchprogressList is type of WatchProgress\");\nassert.strictEqual(await listHelper_1.default.checkType(numberList, watchProgress_1.default), false, \"numberList is not type of WatchProgress\");\nassert.strictEqual(await listHelper_1.default.checkType(watchprogressList, Number), false, \"watchprogressList is not type of Number\");",
              "err": {
                "message": "AssertionError: numberList is not type of WatchProgress",
                "estack": "AssertionError [ERR_ASSERTION]: numberList is not type of WatchProgress\n    at Context.<anonymous> (test\\helperTest\\listHelperTest.ts:53:16)",
                "diff": "- true\n+ false\n"
              },
              "uuid": "23c10763-eb68-4c1b-b63a-6abcd017f0d6",
              "parentUUID": "20d4dfe3-21d8-42b4-9925-7ee26ecd8a38",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ba63ef5a-040b-4d51-868e-dd8027affa95",
            "4e379e31-0897-489d-b673-80f3a9ac5c81",
            "33ff8ef3-2e2f-4b30-a3cd-29f2dd7f44f7",
            "e0c002b5-fc82-4b57-9c49-f011d318dfb1",
            "c1a88846-e4e4-42fa-9bf9-f602c756e26a",
            "a2a6b211-d7ff-4b5e-ba18-76b5ba5c4c0e"
          ],
          "failures": [
            "23c10763-eb68-4c1b-b63a-6abcd017f0d6"
          ],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "778d9875-e2de-4280-8121-5dcc3dec0111",
          "title": "stringHelperTest",
          "fullFile": "C:\\Users\\dbergmann\\Desktop\\list-manager\\test\\helperTest\\stringHelperTest.ts",
          "file": "\\test\\helperTest\\stringHelperTest.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should generate a randome string",
              "fullTitle": "stringHelperTest should generate a randome string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.notEqual(stringHelper_1.default.randomString(), 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789');\nassert.notEqual(stringHelper_1.default.randomString(), '');\nassert.notEqual(typeof stringHelper_1.default.randomString(), 'undefined');\nassert.notEqual(stringHelper_1.default.randomString(), null);\nreturn;",
              "err": {},
              "uuid": "06a07244-e508-417a-a6f1-9c6b37de7bfb",
              "parentUUID": "778d9875-e2de-4280-8121-5dcc3dec0111",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should clean string",
              "fullTitle": "stringHelperTest should clean string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.strictEqual(await stringHelper_1.default.cleanString(\"Test.\"), \"Test\");\nassert.strictEqual(await stringHelper_1.default.cleanString(\"Title -test-\"), \"Title test\");\nassert.strictEqual(await stringHelper_1.default.cleanString(\"Title-test\"), \"Title test\");\nassert.strictEqual(await stringHelper_1.default.cleanString(\"Title 'test'\"), \"Title test\");\nassert.strictEqual(await stringHelper_1.default.cleanString(\"Title!\"), \"Title\");\nassert.strictEqual(await stringHelper_1.default.cleanString(\"Title!!\"), \"Title!!\");\nassert.strictEqual(await stringHelper_1.default.cleanString(\"Title: test\"), \"Title test\");\nassert.strictEqual(await stringHelper_1.default.cleanString(\"Title  test\"), \"Title test\");\nreturn;",
              "err": {},
              "uuid": "e797446d-317f-4a04-8e16-7e4a5e7d2e05",
              "parentUUID": "778d9875-e2de-4280-8121-5dcc3dec0111",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should make test to tset",
              "fullTitle": "stringHelperTest should make test to tset",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await stringHelper_1.default.reverseString('test');\nassert.equal(result, 'tset');\nreturn;",
              "err": {},
              "uuid": "fb6562c6-6f8b-452e-beff-1f41f0e2716f",
              "parentUUID": "778d9875-e2de-4280-8121-5dcc3dec0111",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "06a07244-e508-417a-a6f1-9c6b37de7bfb",
            "e797446d-317f-4a04-8e16-7e4a5e7d2e05",
            "fb6562c6-6f8b-452e-beff-1f41f0e2716f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3e948429-88b4-4175-aec7-2967e89eff3b",
          "title": "timeHelperTest",
          "fullFile": "C:\\Users\\dbergmann\\Desktop\\list-manager\\test\\helperTest\\timeHelperTest.ts",
          "file": "\\test\\helperTest\\timeHelperTest.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should wait 50ms",
              "fullTitle": "timeHelperTest should wait 50ms",
              "timedOut": false,
              "duration": 50,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const start = new Date().getTime();\nawait timeHelper_1.default.delay(50);\nconst result = new Date().getTime() - (start + 50);\nassert.equal(result >= 0, true, 'has waited: ' + result);\nreturn;",
              "err": {},
              "uuid": "8b2ec7d1-b2e9-4d13-8a50-acdec6fa2cef",
              "parentUUID": "3e948429-88b4-4175-aec7-2967e89eff3b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should wait 25ms",
              "fullTitle": "timeHelperTest should wait 25ms",
              "timedOut": false,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const start = new Date().getTime();\nawait timeHelper_1.default.delay(25);\nconst result = new Date().getTime() - (start + 25);\nassert.equal(result >= 0, true, 'has waited: ' + result);\nreturn;",
              "err": {},
              "uuid": "5856ff7d-5e04-42f2-a155-cf9837dba51a",
              "parentUUID": "3e948429-88b4-4175-aec7-2967e89eff3b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should wait 75ms",
              "fullTitle": "timeHelperTest should wait 75ms",
              "timedOut": false,
              "duration": 75,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const start = new Date().getTime();\nawait timeHelper_1.default.delay(75);\nconst result = new Date().getTime() - (start + 75);\nassert.equal(result >= 0, true, 'has waited: ' + result);\nreturn;",
              "err": {},
              "uuid": "49758575-b144-451c-9347-57c370dbc2a9",
              "parentUUID": "3e948429-88b4-4175-aec7-2967e89eff3b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8b2ec7d1-b2e9-4d13-8a50-acdec6fa2cef",
            "5856ff7d-5e04-42f2-a155-cf9837dba51a",
            "49758575-b144-451c-9347-57c370dbc2a9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 151,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6f60d931-ebb8-4161-bdf4-ae89dd1f7783",
          "title": "TitleCheckerTest",
          "fullFile": "C:\\Users\\dbergmann\\Desktop\\list-manager\\test\\helperTest\\titleCheckHelperTest.ts",
          "file": "\\test\\helperTest\\titleCheckHelperTest.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should match (fastMatch)",
              "fullTitle": "TitleCheckerTest should match (fastMatch)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(await titleCheckHelper_1.default.fastMatch([\"Abc\"], [\"abcdefg\", \"ABCD\"]), true);\nassert.equal(await titleCheckHelper_1.default.fastMatch([\"Title Season 2\"], [\"title s2\"]), true);\nassert.equal(await titleCheckHelper_1.default.fastMatch([\"Title Title Season 2\"], [\"title title II\"]), true);\nassert.equal(await titleCheckHelper_1.default.fastMatch([\"ATitle\"], [\"BTitle\"]), false);\nassert.equal(await titleCheckHelper_1.default.fastMatch([\"Title ABC\"], [\"Title CBA\"]), true);\nassert.equal(await titleCheckHelper_1.default.fastMatch([\"Test\"], [\"Test III\"]), true);\nreturn;",
              "err": {},
              "uuid": "a39e4fcd-5bd9-4960-a873-9d7249a32f78",
              "parentUUID": "6f60d931-ebb8-4161-bdf4-ae89dd1f7783",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should match (skipFastMatch)",
              "fullTitle": "TitleCheckerTest should match (skipFastMatch)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(await titleCheckHelper_1.default.checkAnimeNamesInArray([\"Title\"], [\"ATitle\", \"title\"]), true);\nassert.equal(await titleCheckHelper_1.default.checkAnimeNamesInArray([\"Title\"], [\"ATitle\", \"Title\"]), true);\nassert.equal(await titleCheckHelper_1.default.checkAnimeNamesInArray([\"Title!\"], [\"ATitle\", \"title\"]), true);\nassert.equal(await titleCheckHelper_1.default.checkAnimeNamesInArray([\"Title!?\"], [\"ATitle\", \"title\"]), true);\nassert.equal(await titleCheckHelper_1.default.checkAnimeNamesInArray([\"Title Season 3\"], [\"ATitle\", \"Title\"]), true);\nassert.equal(await titleCheckHelper_1.default.checkAnimeNamesInArray([\"Title! Season 3\"], [\"ATitle\", \"Title\"]), true);\nassert.equal(await titleCheckHelper_1.default.checkAnimeNamesInArray([\"Title Season 3\"], [\"ATitle\", \"title\"]), true);\nassert.equal(await titleCheckHelper_1.default.checkAnimeNamesInArray([\"Title Season 3\"], [\"ATitle\", \"Ctitle\"]), false);\nassert.equal(await titleCheckHelper_1.default.checkAnimeNamesInArray([\"Title!\"], [\"ATitle\", \"titleG\"]), false);\nreturn;",
              "err": {},
              "uuid": "ab13a4fb-1911-4457-ab1d-01fbaff774ea",
              "parentUUID": "6f60d931-ebb8-4161-bdf4-ae89dd1f7783",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove season from title",
              "fullTitle": "TitleCheckerTest should remove season from title",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(await titleCheckHelper_1.default.removeSeasonMarkesFromTitle(\"Title Season 2\"), \"Title\");\nassert.equal(await titleCheckHelper_1.default.removeSeasonMarkesFromTitle(\"Title III\"), \"Title\");\nassert.equal(await titleCheckHelper_1.default.removeSeasonMarkesFromTitle(\"Title Episode 2\"), \"Title Episode 2\");\nassert.equal(await titleCheckHelper_1.default.removeSeasonMarkesFromTitle(\"Title 2\"), \"Title\");\nassert.equal(await titleCheckHelper_1.default.removeSeasonMarkesFromTitle(\"Title 2nd -Test-\"), \"Title -Test-\");\nreturn;",
              "err": {},
              "uuid": "3f7f5982-dd7c-40d9-b20d-aad560ae1827",
              "parentUUID": "6f60d931-ebb8-4161-bdf4-ae89dd1f7783",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a39e4fcd-5bd9-4960-a873-9d7249a32f78",
            "ab13a4fb-1911-4457-ab1d-01fbaff774ea",
            "3f7f5982-dd7c-40d9-b20d-aad560ae1827"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "useInlineDiffs": false
      },
      "version": "4.0.1"
    },
    "marge": {
      "options": null,
      "version": "4.0.1"
    }
  }
}